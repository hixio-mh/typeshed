from distutils.cmd import Command
from distutils.filelist import FileList
from typing import Any, Callable, ClassVar, List, Optional, Set, Tuple

def show_formats() -> None: ...

class sdist(Command):
    description: ClassVar[str]
    user_options: ClassVar[List[Tuple[str, Optional[str], str]]]
    boolean_options: ClassVar[List[str]]
    help_options: ClassVar[List[Tuple[str, Optional[str], str, Callable[..., Any]]]]
    negative_opt: ClassVar[Set[str]]
    sub_commands: ClassVar[List[Tuple[str, Optional[Callable[[Command], bool]]]]]
    READMES: ClassVar[Tuple[str, ...]]

    template: Optional[str]
    manifest: Optional[str]
    use_defaults: int = ...
    prune: int = ...
    manifest_only: int = ...
    force_manifest: int = ...
    formats: Optional[str]
    keep_temp: int = ...
    dist_dir: Optional[str]
    metadata_check: int = ...
    owner: Optional[str]
    group: Optional[str]

    archive_files: Optional[List[str]]
    filelist: FileList
    def checking_metadata(self): ...
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...
    def check_metadata(self) -> None: ...
    def get_file_list(self) -> None: ...
    def add_defaults(self) -> None: ...
    def read_template(self) -> None: ...
    def prune_file_list(self) -> None: ...
    def write_manifest(self) -> None: ...
    def read_manifest(self) -> None: ...
    def make_release_tree(self, base_dir: str, files: List[str]) -> None: ...
    def make_distribution(self) -> None: ...
    def get_archive_files(self) -> List[str]: ...
