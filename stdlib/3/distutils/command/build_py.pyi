from distutils.cmd import Command
from typing import Any, ClassVar, Dict, List, Optional, Set, Tuple

class build_py(Command):
    description: ClassVar[str]
    user_options: ClassVar[List[Tuple[str, Optional[str], str]]]
    boolean_options: ClassVar[List[str]]
    negative_opt: ClassVar[Set[str]]

    build_lib: Optional[str]
    py_modules: Optional[List[str]]
    package: Optional[str]
    package_data: Any = ...
    package_dir: Optional[Dict]
    compile: int
    optimize: int
    force: Optional[int]
    packages: Optional[List[str]]
    data_files: Optional[List[str]]
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...
    def get_data_files(self): ...
    def find_data_files(self, package: str, src_dir: str): ...
    def build_package_data(self) -> None: ...
    def get_package_dir(self, package: str): ...
    def check_package(self, package: str, package_dir: str): ...
    def check_module(self, module: str, module_file: str): ...
    def find_package_modules(self, package: str, package_dir: str): ...
    def find_modules(self): ...
    def find_all_modules(self): ...
    def get_source_files(self): ...
    def get_module_outfile(self, build_dir: str, package: str, module: str): ...
    def get_outputs(self, include_bytecode: int = ...): ...
    def build_module(self, module: str, module_file: str, package: str): ...
    def build_modules(self) -> None: ...
    def build_packages(self) -> None: ...
    def byte_compile(self, files: Any) -> None: ...

class build_py_2to3(build_py):
    updated_files: Optional[List[str]]
    def run(self) -> None: ...
    def build_module(self, module: str, module_file: str, package: str): ...
