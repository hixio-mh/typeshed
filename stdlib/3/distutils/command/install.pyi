from distutils.cmd import Command
from typing import Callable, ClassVar, Dict, List, Optional, Tuple, Union

HAS_USER_SITE: bool
WINDOWS_SCHEME: Dict[str, str]
INSTALL_SCHEMES: Dict[str, Dict[str, str]]
SCHEME_KEYS: Tuple[str, ...]

class install(Command):
    description: ClassVar[str]
    user_options: ClassVar[List[Tuple[str, Optional[str], str]]]
    boolean_options: ClassVar[List[str]]
    negative_opt: ClassVar[Dict[str, str]]
    sub_commands: ClassVar[List[Tuple[str, Optional[Callable[[Command], bool]]]]]

    prefix: Optional[str]
    exec_prefix: Optional[str]
    home: Optional[str]
    user: bool
    prefix_option: Optional[str]
    install_base: Optional[str]
    install_platbase: Optional[str]
    root: Optional[str]
    install_purelib: Optional[str]
    install_platlib: Optional[str]
    install_headers: Optional[str]
    install_lib: Optional[str]
    install_scripts: Optional[str]
    install_data: Optional[str]
    install_userbase: str
    install_usersite: str
    install_layout: Optional[str]
    multiarch: Optional[str]
    compile: Optional[int]
    optimize: Optional[str]
    extra_path: Union[None, str, List[str]]
    install_path_file: int
    force: int
    skip_build: int
    warn_dir: int

    build_base: Optional[str] = ...
    build_lib: Optional[str] = ...
    record: Optional[str]
    config_vars: Dict[str, str] = ...
    install_libbase: Optional[str] = ...
    path_file: Optional[str]
    extra_dirs: Optional[str] = ...
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def dump_dirs(self, msg: str) -> None: ...
    def finalize_unix(self) -> None: ...
    def finalize_other(self) -> None: ...
    def select_scheme(self, name: str) -> None: ...
    def expand_basedirs(self) -> None: ...
    def expand_dirs(self) -> None: ...
    def convert_paths(self, *names: str) -> None: ...
    def handle_extra_path(self) -> None: ...
    def change_roots(self, *names: str) -> None: ...
    def create_home_path(self) -> None: ...
    def run(self) -> None: ...
    def create_path_file(self) -> None: ...
    def get_outputs(self) -> List[str]: ...
    def get_inputs(self) -> List[str]: ...
    def has_lib(self) -> bool: ...
    def has_headers(self) -> bool: ...
    def has_scripts(self) -> bool: ...
    def has_data(self) -> bool: ...
