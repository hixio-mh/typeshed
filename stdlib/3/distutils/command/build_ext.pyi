from distutils.cmd import Command
from distutils.extension import Extension
from typing import Any, Callable, ClassVar, Iterable, List, Optional, Pattern, Tuple, Union

extension_name_re: Pattern[str]

def show_compilers() -> None: ...

class build_ext(Command):
    description: ClassVar[str]
    sep_by: ClassVar[str]
    user_options: ClassVar[List[Tuple[str, Optional[str], str]]]
    boolean_options: ClassVar[List[str]]
    help_options: ClassVar[List[Tuple[str, Optional[str], str, Callable[..., Any]]]]

    extensions: Union[List[Tuple[str, Any]], List[Any]]
    build_lib: Optional[str]
    plat_name: Optional[str]
    build_temp: Optional[str]
    inplace: int
    package: Optional[str]
    include_dirs: Optional[str]
    define: Optional[str]
    undef: Optional[str]
    libraries: Optional[str]
    library_dirs: Optional[str]
    rpath: Optional[str]
    link_objects: Optional[str]
    debug: Optional[int]
    force: Optional[int]
    compiler: Optional[str]
    swig: Optional[str]
    swig_cpp: Optional[int]
    swig_opts: Optional[str]
    user: Optional[int]
    parallel: Optional[str]
    def initialize_options(self) -> None: ...
    def finalize_options(self) -> None: ...
    def run(self) -> None: ...
    def check_extensions_list(self, extensions: List[Extension]) -> None: ...
    def get_source_files(self) -> List[str]: ...
    def get_outputs(self) -> List[str]: ...
    def build_extensions(self) -> None: ...
    def build_extension(self, ext: Extension) -> None: ...
    def swig_sources(self, sources: Iterable[str], extension: Extension) -> List[str]: ...
    def find_swig(self) -> str: ...
    def get_ext_fullpath(self, ext_name: str) -> str: ...
    def get_ext_fullname(self, ext_name: str) -> str: ...
    def get_ext_filename(self, ext_name: str) -> str: ...
    def get_export_symbols(self, ext: Extension) -> List[str]: ...
    def get_libraries(self, ext: Extension) -> List[str]: ...
