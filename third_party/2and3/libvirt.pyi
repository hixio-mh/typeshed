from types import TracebackType
from typing import Any, Callable, Dict, List, Optional, Tuple, Type, TypeVar, Union
_T = TypeVar('_T')
_EventCB = Callable[[int, int, int, _T], None]
_EventAddHandleFunc = Callable[[int, int, _EventCB, _T], int]
_EventUpdateHandleFunc = Callable[[int, int], None]
_EventRemoveHandleFunc = Callable[[int], int]
_TimerCB = Callable[[int, _T], None]
_EventAddTimeoutFunc = Callable[[int, _TimerCB, _T], int]
_EventUpdateTimeoutFunc = Callable[[int, int], None]
_EventRemoveTimeoutFunc = Callable[[int], int]
_DomainCB = Callable[['virConnect', 'virDomain', int, int, _T], Optional[int]]
_BlkioParameter = Dict[str, Any]
_MemoryParameter = Dict[str, Any]
_SchedParameter = Dict[str, Any]
_TypedParameter = Dict[str, Any]

class libvirtError(Exception):
    err: Any = ...
    def __init__(self, defmsg: str) -> None: ...
    def get_error_code(self) -> Optional[int]: ...
    def get_error_domain(self) -> Optional[int]: ...
    def get_error_message(self) -> Optional[str]: ...
    def get_error_level(self) -> Optional[int]: ...
    def get_str1(self) -> Optional[str]: ...
    def get_str2(self) -> Optional[str]: ...
    def get_str3(self) -> Optional[str]: ...
    def get_int1(self) -> Optional[int]: ...
    def get_int2(self) -> Optional[int]: ...

def registerErrorHandler(f: Callable[[_T, List], None], ctx: _T) -> int: ...
def openAuth(uri: str, auth: List, flags: int = ...) -> virConnect: ...
def getVersion(name: Optional[str] = ...) -> int: ...
def virEventAddHandle(fd: int, events: int, cb: _EventCB, opaque: _T) -> int: ...
def virEventAddTimeout(timeout: int, cb: _TimerCB, opaque: _T) -> int: ...
def virEventInvokeFreeCallback(opaque: Any) -> None: ...
def open(name: Optional[str] = ...) -> virConnect: ...
def openReadOnly(name: Optional[str] = ...) -> virConnect: ...
def virEventRegisterDefaultImpl() -> int: ...
def virEventRegisterImpl(addHandle: _EventAddHandleFunc, updateHandle: _EventUpdateHandleFunc, removeHandle: _EventRemoveHandleFunc, addTimeout: _EventAddTimeoutFunc, updateTimeout: _EventUpdateTimeoutFunc, removeTimeout: _EventRemoveTimeoutFunc) -> None: ...
def virEventRemoveHandle(watch: int) -> int: ...
def virEventRemoveTimeout(timer: int) -> int: ...
def virEventRunDefaultImpl() -> int: ...
def virEventUpdateHandle(watch: int, events: int) -> None: ...
def virEventUpdateTimeout(timer: int, timeout: int) -> None: ...
def virGetLastError() -> libvirtError: ...
def virGetLastErrorCode() -> int: ...
def virGetLastErrorDomain() -> int: ...
def virGetLastErrorMessage() -> str: ...
def virInitialize() -> int: ...
def virResetLastError() -> None: ...

class virDomain:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def ID(self) -> int: ...
    def OSType(self) -> str: ...
    def UUID(self) -> bytes: ...
    def UUIDString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def abortJob(self) -> int: ...
    def addIOThread(self, iothread_id: int, flags: int = ...) -> int: ...
    def agentSetResponseTimeout(self, timeout: int, flags: int = ...) -> int: ...
    def attachDevice(self, xml: str) -> int: ...
    def attachDeviceFlags(self, xml: str, flags: int = ...) -> int: ...
    def autostart(self) -> int: ...
    def backupBegin(self, backupXML: str, checkpointXML: str, flags: int = ...) -> int: ...
    def backupGetXMLDesc(self, flags: int = ...) -> str: ...
    def blkioParameters(self, flags: int = ...) -> _BlkioParameter: ...
    def blockCommit(self, disk: str, base: str, top: str, bandwidth: int = ..., flags: int = ...) -> int: ...
    def blockCopy(self, disk: str, destxml: str, params: Optional[_TypedParameter] = ..., flags: int = ...) -> int: ...
    def blockInfo(self, path: str, flags: int = ...) -> List[int]: ...
    def blockIoTune(self, disk: str, flags: int = ...) -> str: ...
    def blockJobAbort(self, disk: str, flags: int = ...) -> int: ...
    def blockJobInfo(self, path: str, flags: int = ...) -> Dict[str, Any]: ...
    def blockJobSetSpeed(self, disk: str, bandwidth: int, flags: int = ...) -> int: ...
    def blockPeek(self, disk: str, offset: int, size: int, flags: int = ...) -> str: ...
    def blockPull(self, disk: str, bandwidth: int = ..., flags: int = ...) -> int: ...
    def blockRebase(self, disk: str, base: str, bandwidth: int = ..., flags: int = ...) -> int: ...
    def blockResize(self, disk: str, size: int, flags: int = ...) -> int: ...
    def blockStats(self, path: str) -> Any: ...
    def blockStatsFlags(self, path: str, flags: int = ...) -> Dict[str, Any]: ...
    def checkpointCreateXML(self, xmlDesc: str, flags: int = ...) -> virDomainCheckpoint: ...
    def checkpointLookupByName(self, name: str, flags: int = ...) -> virDomainCheckpoint: ...
    def controlInfo(self, flags: int = ...) -> List[int]: ...
    def coreDump(self, to: str, flags: int = ...) -> int: ...
    def coreDumpWithFormat(self, to: str, dumpformat: int, flags: int = ...) -> int: ...
    def create(self) -> int: ...
    def createWithFlags(self, flags: int = ...) -> int: ...
    def delIOThread(self, iothread_id: int, flags: int = ...) -> int: ...
    def destroy(self) -> int: ...
    def destroyFlags(self, flags: int = ...) -> int: ...
    def detachDevice(self, xml: str) -> int: ...
    def detachDeviceAlias(self, alias: str, flags: int = ...) -> int: ...
    def detachDeviceFlags(self, xml: str, flags: int = ...) -> int: ...
    def diskErrors(self, flags: int = ...) -> Dict[str, Any]: ...
    def emulatorPinInfo(self, flags: int = ...) -> str: ...
    def fSTrim(self, mountPoint: str, minimum: int, flags: int = ...) -> int: ...
    def fsInfo(self, flags: int = ...) -> List[Any]: ...
    def getCPUStats(self, total: Any, flags: int = ...) -> List[Any]: ...
    def guestInfo(self, types: int = ..., flags: int = ...) -> Dict[str, Any]: ...
    def guestVcpus(self, flags: int = ...) -> int: ...
    def hasCurrentSnapshot(self, flags: int = ...) -> int: ...
    def hasManagedSaveImage(self, flags: int = ...) -> int: ...
    def hostname(self, flags: int = ...) -> str: ...
    def info(self) -> List[int]: ...
    def injectNMI(self, flags: int = ...) -> int: ...
    def interfaceAddresses(self, source: int, flags: int = ...) -> Dict[str, Any]: ...
    def interfaceParameters(self, device: str, flags: int = ...) -> str: ...
    def interfaceStats(self, path: str) -> Any: ...
    def ioThreadInfo(self, flags: int = ...) -> List[Any]: ...
    def isActive(self) -> int: ...
    def isPersistent(self) -> int: ...
    def isUpdated(self) -> int: ...
    def jobInfo(self) -> List[int]: ...
    def jobStats(self, flags: int = ...) -> Dict[str, Any]: ...
    def launchSecurityInfo(self, flags: int = ...) -> Dict[str, Any]: ...
    def managedSave(self, flags: int = ...) -> int: ...
    def managedSaveDefineXML(self, dxml: str, flags: int = ...) -> int: ...
    def managedSaveGetXMLDesc(self, flags: int = ...) -> str: ...
    def managedSaveRemove(self, flags: int = ...) -> int: ...
    def maxMemory(self) -> int: ...
    def maxVcpus(self) -> int: ...
    def memoryParameters(self, flags: int = ...) -> Dict[str, Any]: ...
    def memoryPeek(self, start: int, size: int, flags: int = ...) -> str: ...
    def memoryStats(self) -> Dict[str, Any]: ...
    def metadata(self, type: int, uri: str, flags: int = ...) -> str: ...
    def migrate(self, dconn: virConnect, flags: int = ..., dname: Optional[str] = ..., uri: Optional[str] = ..., bandwidth: int = ...) -> virDomain: ...
    def migrate2(self, dconn: virConnect, dxml: Optional[str] = ..., flags: int = ..., dname: Optional[str] = ..., uri: Optional[str] = ..., bandwidth: int = ...) -> virDomain: ...
    def migrate3(self, dconn: virConnect, params: Dict[str, Any], flags: int = ...) -> virDomain: ...
    def migrateGetCompressionCache(self, flags: int = ...) -> int: ...
    def migrateGetMaxDowntime(self, flags: int = ...) -> int: ...
    def migrateGetMaxSpeed(self, flags: int = ...) -> int: ...
    def migrateSetCompressionCache(self, cacheSize: int, flags: int = ...) -> int: ...
    def migrateSetMaxDowntime(self, downtime: int, flags: int = ...) -> int: ...
    def migrateSetMaxSpeed(self, bandwidth: int, flags: int = ...) -> int: ...
    def migrateStartPostCopy(self, flags: int = ...) -> int: ...
    def migrateToURI(self, duri: str, flags: int = ..., dname: Optional[str] = ..., bandwidth: int = ...) -> int: ...
    def migrateToURI2(self, dconnuri: Optional[str] = ..., miguri: Optional[str] = ..., dxml: Optional[str] = ..., flags: int = ..., dname: Optional[str] = ..., bandwidth: int = ...) -> int: ...
    def migrateToURI3(self, dconnuri: str, params: Dict[str, Any], flags: int = ...) -> int: ...
    def name(self) -> str: ...
    def numaParameters(self, flags: int = ...) -> Dict[str, Any]: ...
    def openChannel(self, name: str, st: virStream, flags: int = ...) -> int: ...
    def openConsole(self, dev_name: Optional[str], st: virStream, flags: int = ...) -> int: ...
    def openGraphics(self, idx: int, fd: int, flags: int = ...) -> int: ...
    def openGraphicsFD(self, idx: int, flags: int = ...) -> int: ...
    def pMSuspendForDuration(self, target: int, duration: int, flags: int = ...) -> int: ...
    def pMWakeup(self, flags: int = ...) -> int: ...
    def perfEvents(self, flags: int = ...) -> Dict[str, Any]: ...
    def pinEmulator(self, cpumap: bytes, flags: int = ...) -> int: ...
    def pinIOThread(self, iothread_val: int, cpumap: bytes, flags: int = ...) -> int: ...
    def pinVcpu(self, vcpu: int, cpumap: bytes) -> int: ...
    def pinVcpuFlags(self, vcpu: int, cpumap: bytes, flags: int = ...) -> int: ...
    def reboot(self, flags: int = ...) -> int: ...
    def rename(self, new_name: str, flags: int = ...) -> int: ...
    def reset(self, flags: int = ...) -> int: ...
    def resume(self) -> int: ...
    def revertToSnapshot(self, snap: virDomainSnapshot, flags: int = ...) -> int: ...
    def save(self, to: str) -> int: ...
    def saveFlags(self, to: str, dxml: Optional[str] = ..., flags: int = ...) -> int: ...
    def schedulerParameters(self) -> Dict[str, Any]: ...
    def schedulerParametersFlags(self, flags: int = ...) -> Dict[str, Any]: ...
    def schedulerType(self) -> str: ...
    def screenshot(self, stream: virStream, screen: int, flags: int = ...) -> str: ...
    def securityLabel(self) -> List[Any]: ...
    def securityLabelList(self) -> List[Any]: ...
    def sendKey(self, codeset: int, holdtime: int, keycodes: Any, nkeycodes: int, flags: int = ...) -> int: ...
    def sendProcessSignal(self, pid_value: int, signum: int, flags: int = ...) -> int: ...
    def setAutostart(self, autostart: int) -> int: ...
    def setBlkioParameters(self, params: _BlkioParameter, flags: int = ...) -> int: ...
    def setBlockIoTune(self, disk: str, params: _TypedParameter, flags: int = ...) -> int: ...
    def setBlockThreshold(self, dev: str, threshold: int, flags: int = ...) -> int: ...
    def setGuestVcpus(self, cpumap: str, state: int, flags: int = ...) -> int: ...
    def setIOThreadParams(self, iothread_val: int, params: _TypedParameter, flags: int = ...) -> int: ...
    def setInterfaceParameters(self, device: str, params: _TypedParameter, flags: int = ...) -> int: ...
    def setLifecycleAction(self, type: int, action: int, flags: int = ...) -> int: ...
    def setMaxMemory(self, memory: int) -> int: ...
    def setMemory(self, memory: int) -> int: ...
    def setMemoryFlags(self, memory: int, flags: int = ...) -> int: ...
    def setMemoryParameters(self, params: _MemoryParameter, flags: int = ...) -> int: ...
    def setMemoryStatsPeriod(self, period: int, flags: int = ...) -> int: ...
    def setMetadata(self, type: int, metadata: str, key: str, uri: str, flags: int = ...) -> int: ...
    def setNumaParameters(self, params: _TypedParameter, flags: int = ...) -> int: ...
    def setPerfEvents(self, params: _TypedParameter, flags: int = ...) -> int: ...
    def setSchedulerParameters(self, params: _SchedParameter) -> int: ...
    def setSchedulerParametersFlags(self, params: _SchedParameter, flags: int = ...) -> int: ...
    def setUserPassword(self, user: str, password: str, flags: int = ...) -> int: ...
    def setVcpu(self, vcpumap: str, state: int, flags: int = ...) -> int: ...
    def setVcpus(self, nvcpus: int) -> int: ...
    def setVcpusFlags(self, nvcpus: int, flags: int = ...) -> int: ...
    def shutdown(self) -> int: ...
    def shutdownFlags(self, flags: int = ...) -> int: ...
    def snapshotCreateXML(self, xmlDesc: str, flags: int = ...) -> virDomainSnapshot: ...
    def snapshotCurrent(self, flags: int = ...) -> virDomainSnapshot: ...
    def snapshotListNames(self, flags: int = ...) -> List[str]: ...
    def snapshotLookupByName(self, name: str, flags: int = ...) -> virDomainSnapshot: ...
    def snapshotNum(self, flags: int = ...) -> int: ...
    def state(self, flags: int = ...) -> List[int]: ...
    def suspend(self) -> int: ...
    def undefine(self) -> int: ...
    def undefineFlags(self, flags: int = ...) -> int: ...
    def updateDeviceFlags(self, xml: str, flags: int = ...) -> int: ...
    def vcpuPinInfo(self, flags: int = ...) -> str: ...
    def vcpus(self) -> Any: ...
    def vcpusFlags(self, flags: int = ...) -> int: ...
    def listAllSnapshots(self, flags: int = ...) -> List[virDomainSnapshot]: ...
    def listAllCheckpoints(self, flags: int = ...) -> List[virDomainCheckpoint]: ...
    def createWithFiles(self, files: List[int], flags: int = ...) -> virDomain: ...
    def fsFreeze(self, mountpoints: List[str] = ..., flags: int = ...) -> int: ...
    def fsThaw(self, mountpoints: List[str] = ..., flags: int = ...) -> int: ...
    def getTime(self, flags: int = ...) -> int: ...
    def setTime(self, time: int = ..., flags: int = ...) -> int: ...

class virNetwork:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def DHCPLeases(self, mac: Optional[str] = ..., flags: int = ...) -> List[Any]: ...
    def UUID(self) -> bytes: ...
    def UUIDString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def autostart(self) -> int: ...
    def bridgeName(self) -> str: ...
    def create(self) -> int: ...
    def destroy(self) -> int: ...
    def isActive(self) -> int: ...
    def isPersistent(self) -> int: ...
    def name(self) -> str: ...
    def portCreateXML(self, xmldesc: str, flags: int = ...) -> virNetworkPort: ...
    def portLookupByUUID(self, uuid: bytes) -> virNetworkPort: ...
    def portLookupByUUIDString(self, uuidstr: str) -> virNetworkPort: ...
    def setAutostart(self, autostart: int) -> int: ...
    def undefine(self) -> int: ...
    def update(self, command: int, section: int, parentIndex: int, xml: str, flags: int = ...) -> int: ...
    def listAllPorts(self, flags: int = ...) -> List[virNetworkPort]: ...

class virNetworkPort:
    def __init__(self, net: virNetwork, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def network(self) -> virNetwork: ...
    def c_pointer(self) -> int: ...
    def UUID(self) -> bytes: ...
    def UUIDString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def delete(self, flags: int = ...) -> int: ...
    def parameters(self, flags: int = ...) -> Dict[str, Any]: ...
    def setParameters(self, params: _TypedParameter, flags: int = ...) -> int: ...

class virInterface:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def MACString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def create(self, flags: int = ...) -> int: ...
    def destroy(self, flags: int = ...) -> int: ...
    def isActive(self) -> int: ...
    def name(self) -> str: ...
    def undefine(self) -> int: ...

class virStoragePool:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def UUID(self) -> bytes: ...
    def UUIDString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def autostart(self) -> int: ...
    def build(self, flags: int = ...) -> int: ...
    def create(self, flags: int = ...) -> int: ...
    def createXML(self, xmlDesc: str, flags: int = ...) -> virStorageVol: ...
    def createXMLFrom(self, xmlDesc: str, clonevol: virStorageVol, flags: int = ...) -> virStorageVol: ...
    def delete(self, flags: int = ...) -> int: ...
    def destroy(self) -> int: ...
    def info(self) -> List[int]: ...
    def isActive(self) -> int: ...
    def isPersistent(self) -> int: ...
    def listVolumes(self) -> List[str]: ...
    def name(self) -> str: ...
    def numOfVolumes(self) -> int: ...
    def refresh(self, flags: int = ...) -> int: ...
    def setAutostart(self, autostart: int) -> int: ...
    def storageVolLookupByName(self, name: str) -> virStorageVol: ...
    def undefine(self) -> int: ...
    def listAllVolumes(self, flags: int = ...) -> List[virStorageVol]: ...

class virStorageVol:
    streamBufSize: int = ...
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def delete(self, flags: int = ...) -> int: ...
    def download(self, stream: virStream, offset: int, length: int, flags: int = ...) -> int: ...
    def info(self) -> List[int]: ...
    def infoFlags(self, flags: int = ...) -> List[int]: ...
    def key(self) -> str: ...
    def name(self) -> str: ...
    def path(self) -> str: ...
    def resize(self, capacity: int, flags: int = ...) -> int: ...
    def storagePoolLookupByVolume(self) -> virStoragePool: ...
    def upload(self, stream: virStream, offset: int, length: int, flags: int = ...) -> int: ...
    def wipe(self, flags: int = ...) -> int: ...
    def wipePattern(self, algorithm: int, flags: int = ...) -> int: ...

class virConnect:
    def __init__(self, _obj: Any = ...) -> None: ...
    def c_pointer(self) -> int: ...
    def allocPages(self, pages: Dict[int, int], startCell: int = ..., cellCount: int = ..., flags: int = ...) -> int: ...
    def baselineCPU(self, xmlCPUs: Any, flags: int = ...) -> str: ...
    def baselineHypervisorCPU(self, emulator: str, arch: str, machine: str, virttype: str, xmlCPUs: Any, flags: int = ...) -> str: ...
    def changeBegin(self, flags: int = ...) -> int: ...
    def changeCommit(self, flags: int = ...) -> int: ...
    def changeRollback(self, flags: int = ...) -> int: ...
    def close(self) -> int: ...
    def compareCPU(self, xmlDesc: str, flags: int = ...) -> int: ...
    def compareHypervisorCPU(self, emulator: str, arch: str, machine: str, virttype: str, xmlCPU: str, flags: int = ...) -> int: ...
    def createLinux(self, xmlDesc: str, flags: int = ...) -> virDomain: ...
    def createXML(self, xmlDesc: str, flags: int = ...) -> virDomain: ...
    def defineXML(self, xml: str) -> virDomain: ...
    def defineXMLFlags(self, xml: str, flags: int = ...) -> virDomain: ...
    def domainXMLFromNative(self, nativeFormat: str, nativeConfig: str, flags: int = ...) -> str: ...
    def domainXMLToNative(self, nativeFormat: str, domainXml: str, flags: int = ...) -> str: ...
    def findStoragePoolSources(self, type: str, srcSpec: str, flags: int = ...) -> str: ...
    def getCPUMap(self, flags: int = ...) -> Any: ...
    def getCPUModelNames(self, arch: str, flags: int = ...) -> List[str]: ...
    def getCPUStats(self, cpuNum: int, flags: int = ...) -> Dict[str, Any]: ...
    def getCapabilities(self) -> str: ...
    def getCellsFreeMemory(self, startCell: int, maxCells: int) -> List[int]: ...
    def getDomainCapabilities(self, emulatorbin: Optional[str] = ..., arch: Optional[str] = ..., machine: Optional[str] = ..., virttype: Optional[str] = ..., flags: int = ...) -> str: ...
    def getFreeMemory(self) -> int: ...
    def getFreePages(self, pages: str, startCell: int, maxCells: int, flags: int = ...) -> List[Any]: ...
    def getHostname(self) -> str: ...
    def getInfo(self) -> List[Any]: ...
    def getLibVersion(self) -> int: ...
    def getMaxVcpus(self, type: str) -> int: ...
    def getMemoryParameters(self, flags: int = ...) -> Dict[str, int]: ...
    def getMemoryStats(self, cellNum: int, flags: int = ...) -> Dict[str, Any]: ...
    def getSEVInfo(self, flags: int = ...) -> Dict[str, Any]: ...
    def getSecurityModel(self) -> List[str]: ...
    def getStoragePoolCapabilities(self, flags: int = ...) -> str: ...
    def getSysinfo(self, flags: int = ...) -> str: ...
    def getType(self) -> str: ...
    def getURI(self) -> str: ...
    def getVersion(self) -> int: ...
    def interfaceDefineXML(self, xml: str, flags: int = ...) -> virInterface: ...
    def interfaceLookupByMACString(self, macstr: str) -> virInterface: ...
    def interfaceLookupByName(self, name: str) -> virInterface: ...
    def isAlive(self) -> int: ...
    def isEncrypted(self) -> int: ...
    def isSecure(self) -> int: ...
    def listDefinedDomains(self) -> List[str]: ...
    def listDefinedInterfaces(self) -> List[str]: ...
    def listDefinedNetworks(self) -> List[str]: ...
    def listDefinedStoragePools(self) -> List[str]: ...
    def listDevices(self, cap: bytes, flags: int = ...) -> List[str]: ...
    def listDomainsID(self) -> List[int]: ...
    def listInterfaces(self) -> List[str]: ...
    def listNWFilters(self) -> List[str]: ...
    def listNetworks(self) -> List[str]: ...
    def listSecrets(self) -> List[str]: ...
    def listStoragePools(self) -> List[str]: ...
    def lookupByID(self, id: int) -> virDomain: ...
    def lookupByName(self, name: str) -> virDomain: ...
    def lookupByUUID(self, uuid: bytes) -> virDomain: ...
    def lookupByUUIDString(self, uuidstr: str) -> virDomain: ...
    def networkCreateXML(self, xmlDesc: str) -> virNetwork: ...
    def networkDefineXML(self, xml: str) -> virNetwork: ...
    def networkLookupByName(self, name: str) -> virNetwork: ...
    def networkLookupByUUID(self, uuid: bytes) -> virNetwork: ...
    def networkLookupByUUIDString(self, uuidstr: str) -> virNetwork: ...
    def newStream(self, flags: int = ...) -> virStream: ...
    def nodeDeviceCreateXML(self, xmlDesc: str, flags: int = ...) -> virNodeDevice: ...
    def nodeDeviceLookupByName(self, name: str) -> virNodeDevice: ...
    def nodeDeviceLookupSCSIHostByWWN(self, wwnn: str, wwpn: str, flags: int = ...) -> virNodeDevice: ...
    def numOfDefinedDomains(self) -> int: ...
    def numOfDefinedInterfaces(self) -> int: ...
    def numOfDefinedNetworks(self) -> int: ...
    def numOfDefinedStoragePools(self) -> int: ...
    def numOfDevices(self, cap: str, flags: int = ...) -> int: ...
    def numOfDomains(self) -> int: ...
    def numOfInterfaces(self) -> int: ...
    def numOfNWFilters(self) -> int: ...
    def numOfNetworks(self) -> int: ...
    def numOfSecrets(self) -> int: ...
    def numOfStoragePools(self) -> int: ...
    def nwfilterBindingCreateXML(self, xml: str, flags: int = ...) -> virNWFilterBinding: ...
    def nwfilterBindingLookupByPortDev(self, portdev: str) -> virNWFilterBinding: ...
    def nwfilterDefineXML(self, xmlDesc: str) -> virNWFilter: ...
    def nwfilterLookupByName(self, name: str) -> virNWFilter: ...
    def nwfilterLookupByUUID(self, uuid: bytes) -> virNWFilter: ...
    def nwfilterLookupByUUIDString(self, uuidstr: str) -> virNWFilter: ...
    def restore(self, frm: str) -> int: ...
    def restoreFlags(self, frm: str, dxml: Optional[str] = ..., flags: int = ...) -> int: ...
    def saveImageDefineXML(self, file: str, dxml: str, flags: int = ...) -> int: ...
    def saveImageGetXMLDesc(self, file: str, flags: int = ...) -> str: ...
    def secretDefineXML(self, xml: str, flags: int = ...) -> virSecret: ...
    def secretLookupByUUID(self, uuid: bytes) -> virSecret: ...
    def secretLookupByUUIDString(self, uuidstr: str) -> virSecret: ...
    def secretLookupByUsage(self, usageType: int, usageID: str) -> virSecret: ...
    def setIdentity(self, params: _TypedParameter, flags: int = ...) -> int: ...
    def setKeepAlive(self, interval: int, count: int) -> int: ...
    def setMemoryParameters(self, params: _TypedParameter, flags: int = ...) -> int: ...
    def storagePoolCreateXML(self, xmlDesc: str, flags: int = ...) -> virStoragePool: ...
    def storagePoolDefineXML(self, xml: str, flags: int = ...) -> virStoragePool: ...
    def storagePoolLookupByName(self, name: str) -> virStoragePool: ...
    def storagePoolLookupByTargetPath(self, path: str) -> virStoragePool: ...
    def storagePoolLookupByUUID(self, uuid: bytes) -> virStoragePool: ...
    def storagePoolLookupByUUIDString(self, uuidstr: str) -> virStoragePool: ...
    def storageVolLookupByKey(self, key: str) -> virStorageVol: ...
    def storageVolLookupByPath(self, path: str) -> virStorageVol: ...
    def suspendForDuration(self, target: int, duration: int, flags: int = ...) -> int: ...
    def virConnGetLastError(self) -> libvirtError: ...
    def virConnResetLastError(self) -> None: ...
    def __del__(self) -> None: ...
    def __enter__(self) -> virConnect: ...
    def __exit__(self, exc_type_: Optional[Type[BaseException]], exc_value_: Optional[BaseException], traceback_: Optional[TracebackType]) -> None: ...
    def domainEventDeregister(self, cb: _DomainCB) -> None: ...
    domainEventCallbacks: Any = ...
    def domainEventRegister(self, cb: _DomainCB, opaque: _T) -> None: ...
    def domainEventDeregisterAny(self, callbackID: int) -> None: ...
    def networkEventDeregisterAny(self, callbackID: int) -> None: ...
    networkEventCallbackID: Any = ...
    def networkEventRegisterAny(self, net: Optional[virNetwork], eventID: int, cb: Callable, opaque: _T) -> int: ...
    domainEventCallbackID: Any = ...
    def domainEventRegisterAny(self, dom: Optional[virDomain], eventID: int, cb: Callable, opaque: _T) -> int: ...
    def storagePoolEventDeregisterAny(self, callbackID: int) -> None: ...
    storagePoolEventCallbackID: Any = ...
    def storagePoolEventRegisterAny(self, pool: Optional[virStoragePool], eventID: int, cb: Callable, opaque: _T) -> int: ...
    def nodeDeviceEventDeregisterAny(self, callbackID: int) -> None: ...
    nodeDeviceEventCallbackID: Any = ...
    def nodeDeviceEventRegisterAny(self, dev: Optional[virNodeDevice], eventID: int, cb: Callable, opaque: _T) -> int: ...
    def secretEventDeregisterAny(self, callbackID: int) -> None: ...
    secretEventCallbackID: Any = ...
    def secretEventRegisterAny(self, secret: Optional[virSecret], eventID: int, cb: Callable, opaque: _T) -> int: ...
    def listAllDomains(self, flags: int = ...) -> List[virDomain]: ...
    def listAllStoragePools(self, flags: int = ...) -> List[virStoragePool]: ...
    def listAllNetworks(self, flags: int = ...) -> List[virNetwork]: ...
    def listAllInterfaces(self, flags: int = ...) -> List[virInterface]: ...
    def listAllDevices(self, flags: int = ...) -> List[virNodeDevice]: ...
    def listAllNWFilters(self, flags: int = ...) -> List[virNWFilter]: ...
    def listAllNWFilterBindings(self, flags: int = ...) -> List[virNWFilterBinding]: ...
    def listAllSecrets(self, flags: int = ...) -> List[virSecret]: ...
    def unregisterCloseCallback(self) -> None: ...
    def registerCloseCallback(self, cb: Callable, opaque: _T) -> int: ...
    def createXMLWithFiles(self, xmlDesc: str, files: List[int], flags: int = ...) -> virDomain: ...
    def getAllDomainStats(self, stats: int = ..., flags: int = ...) -> List[Tuple[virDomain, Dict[str, Any]]]: ...
    def domainListGetStats(self, doms: List[virDomain], stats: int = ..., flags: int = ...) -> List[Tuple[virDomain, Dict[str, Any]]]: ...

class virNodeDevice:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def destroy(self) -> int: ...
    def detachFlags(self, driverName: str, flags: int = ...) -> int: ...
    def dettach(self) -> int: ...
    def listCaps(self) -> List[str]: ...
    def name(self) -> str: ...
    def numOfCaps(self) -> int: ...
    def parent(self) -> str: ...
    def reAttach(self) -> int: ...
    def reset(self) -> int: ...

class virSecret:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def UUID(self) -> bytes: ...
    def UUIDString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def setValue(self, value: str, flags: int = ...) -> int: ...
    def undefine(self) -> int: ...
    def usageID(self) -> str: ...
    def usageType(self) -> int: ...
    def value(self, flags: int = ...) -> str: ...

class virNWFilter:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def UUID(self) -> bytes: ...
    def UUIDString(self) -> str: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def name(self) -> str: ...
    def undefine(self) -> int: ...

class virNWFilterBinding:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def XMLDesc(self, flags: int = ...) -> str: ...
    def delete(self) -> int: ...
    def filterName(self) -> str: ...
    def portDev(self) -> str: ...

class virStream:
    def __init__(self, conn: virConnect, _obj: Any = ...) -> None: ...
    def connect(self) -> virConnect: ...
    def c_pointer(self) -> int: ...
    def abort(self) -> int: ...
    def eventRemoveCallback(self) -> int: ...
    def eventUpdateCallback(self, events: int) -> int: ...
    def finish(self) -> int: ...
    def __del__(self) -> None: ...
    cb: Callable = ...
    def eventAddCallback(self, events: int, cb: Callable[[virStream, int, _T], None], opaque: _T) -> None: ...
    def recvAll(self, handler: Callable[[virStream, bytes, _T], int], opaque: _T) -> None: ...
    def sendAll(self, handler: Callable[[virStream, int, _T], bytes], opaque: _T) -> None: ...
    def recv(self, nbytes: int) -> bytes: ...
    def send(self, data: bytes) -> int: ...
    def recvHole(self, flags: int = ...) -> int: ...
    def sendHole(self, length: int, flags: int = ...) -> int: ...
    def recvFlags(self, nbytes: int, flags: int = ...) -> Union[bytes, int]: ...
    def sparseRecvAll(self, handler: Callable[[virStream, bytes, _T], Union[bytes, int]], holeHandler: Callable[[virStream, int, _T], Optional[int]], opaque: _T) -> None: ...
    def sparseSendAll(self, handler: Callable[[virStream, int, _T], Union[bytes, int]], holeHandler: Callable[[virStream, _T], Tuple[bool, int]], skipHandler: Callable[[virStream, int, _T], int], opaque: _T) -> None: ...

class virDomainCheckpoint:
    def __init__(self, dom: virDomain, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def domain(self) -> virDomain: ...
    def c_pointer(self) -> int: ...
    def delete(self, flags: int = ...) -> int: ...
    def getName(self) -> str: ...
    def getParent(self, flags: int = ...) -> virDomainCheckpoint: ...
    def getXMLDesc(self, flags: int = ...) -> str: ...
    def getConnect(self) -> virConnect: ...
    def getDomain(self) -> virDomain: ...
    def listAllChildren(self, flags: int = ...) -> List[virDomainCheckpoint]: ...

class virDomainSnapshot:
    def __init__(self, dom: virDomain, _obj: Any = ...) -> None: ...
    def __del__(self) -> None: ...
    def connect(self) -> virConnect: ...
    def domain(self) -> virDomain: ...
    def c_pointer(self) -> int: ...
    def delete(self, flags: int = ...) -> int: ...
    def getName(self) -> str: ...
    def getParent(self, flags: int = ...) -> virDomainSnapshot: ...
    def getXMLDesc(self, flags: int = ...) -> str: ...
    def hasMetadata(self, flags: int = ...) -> int: ...
    def isCurrent(self, flags: int = ...) -> int: ...
    def listChildrenNames(self, flags: int = ...) -> List[str]: ...
    def numChildren(self, flags: int = ...) -> int: ...
    def getConnect(self) -> virConnect: ...
    def getDomain(self) -> virDomain: ...
    def listAllChildren(self, flags: int = ...) -> List[virDomainSnapshot]: ...

VIR_DOMAIN_BLKIO_PARAM_INT: int
VIR_DOMAIN_BLKIO_PARAM_UINT: int
VIR_DOMAIN_BLKIO_PARAM_LLONG: int
VIR_DOMAIN_BLKIO_PARAM_ULLONG: int
VIR_DOMAIN_BLKIO_PARAM_DOUBLE: int
VIR_DOMAIN_BLKIO_PARAM_BOOLEAN: int
VIR_CPU_COMPARE_ERROR: int
VIR_CPU_COMPARE_INCOMPATIBLE: int
VIR_CPU_COMPARE_IDENTICAL: int
VIR_CPU_COMPARE_SUPERSET: int
VIR_CONNECT_BASELINE_CPU_EXPAND_FEATURES: int
VIR_CONNECT_BASELINE_CPU_MIGRATABLE: int
VIR_CONNECT_CLOSE_REASON_ERROR: int
VIR_CONNECT_CLOSE_REASON_EOF: int
VIR_CONNECT_CLOSE_REASON_KEEPALIVE: int
VIR_CONNECT_CLOSE_REASON_CLIENT: int
VIR_CONNECT_COMPARE_CPU_FAIL_INCOMPATIBLE: int
VIR_CRED_USERNAME: int
VIR_CRED_AUTHNAME: int
VIR_CRED_LANGUAGE: int
VIR_CRED_CNONCE: int
VIR_CRED_PASSPHRASE: int
VIR_CRED_ECHOPROMPT: int
VIR_CRED_NOECHOPROMPT: int
VIR_CRED_REALM: int
VIR_CRED_EXTERNAL: int
VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_UNKNOWN: int
VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_DOMAIN_STARTED: int
VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_REASON_CHANNEL: int
VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_CONNECTED: int
VIR_CONNECT_DOMAIN_EVENT_AGENT_LIFECYCLE_STATE_DISCONNECTED: int
VIR_DOMAIN_BLOCK_JOB_COMPLETED: int
VIR_DOMAIN_BLOCK_JOB_FAILED: int
VIR_DOMAIN_BLOCK_JOB_CANCELED: int
VIR_DOMAIN_BLOCK_JOB_READY: int
VIR_DOMAIN_EVENT_DISK_CHANGE_MISSING_ON_START: int
VIR_DOMAIN_EVENT_DISK_DROP_MISSING_ON_START: int
VIR_CONNECT_RO: int
VIR_CONNECT_NO_ALIASES: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_ACTIVE: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_INACTIVE: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_PERSISTENT: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_TRANSIENT: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_RUNNING: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_PAUSED: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_SHUTOFF: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_OTHER: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_NOWAIT: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_BACKING: int
VIR_CONNECT_GET_ALL_DOMAINS_STATS_ENFORCE_STATS: int
VIR_CONNECT_LIST_DOMAINS_ACTIVE: int
VIR_CONNECT_LIST_DOMAINS_INACTIVE: int
VIR_CONNECT_LIST_DOMAINS_PERSISTENT: int
VIR_CONNECT_LIST_DOMAINS_TRANSIENT: int
VIR_CONNECT_LIST_DOMAINS_RUNNING: int
VIR_CONNECT_LIST_DOMAINS_PAUSED: int
VIR_CONNECT_LIST_DOMAINS_SHUTOFF: int
VIR_CONNECT_LIST_DOMAINS_OTHER: int
VIR_CONNECT_LIST_DOMAINS_MANAGEDSAVE: int
VIR_CONNECT_LIST_DOMAINS_NO_MANAGEDSAVE: int
VIR_CONNECT_LIST_DOMAINS_AUTOSTART: int
VIR_CONNECT_LIST_DOMAINS_NO_AUTOSTART: int
VIR_CONNECT_LIST_DOMAINS_HAS_SNAPSHOT: int
VIR_CONNECT_LIST_DOMAINS_NO_SNAPSHOT: int
VIR_CONNECT_LIST_DOMAINS_HAS_CHECKPOINT: int
VIR_CONNECT_LIST_DOMAINS_NO_CHECKPOINT: int
VIR_CONNECT_LIST_INTERFACES_INACTIVE: int
VIR_CONNECT_LIST_INTERFACES_ACTIVE: int
VIR_CONNECT_LIST_NETWORKS_INACTIVE: int
VIR_CONNECT_LIST_NETWORKS_ACTIVE: int
VIR_CONNECT_LIST_NETWORKS_PERSISTENT: int
VIR_CONNECT_LIST_NETWORKS_TRANSIENT: int
VIR_CONNECT_LIST_NETWORKS_AUTOSTART: int
VIR_CONNECT_LIST_NETWORKS_NO_AUTOSTART: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_SYSTEM: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_PCI_DEV: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_DEV: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_USB_INTERFACE: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_NET: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_HOST: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_TARGET: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_STORAGE: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_FC_HOST: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_VPORTS: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_SCSI_GENERIC: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_DRM: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV_TYPES: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_MDEV: int
VIR_CONNECT_LIST_NODE_DEVICES_CAP_CCW_DEV: int
VIR_CONNECT_LIST_SECRETS_EPHEMERAL: int
VIR_CONNECT_LIST_SECRETS_NO_EPHEMERAL: int
VIR_CONNECT_LIST_SECRETS_PRIVATE: int
VIR_CONNECT_LIST_SECRETS_NO_PRIVATE: int
VIR_CONNECT_LIST_STORAGE_POOLS_INACTIVE: int
VIR_CONNECT_LIST_STORAGE_POOLS_ACTIVE: int
VIR_CONNECT_LIST_STORAGE_POOLS_PERSISTENT: int
VIR_CONNECT_LIST_STORAGE_POOLS_TRANSIENT: int
VIR_CONNECT_LIST_STORAGE_POOLS_AUTOSTART: int
VIR_CONNECT_LIST_STORAGE_POOLS_NO_AUTOSTART: int
VIR_CONNECT_LIST_STORAGE_POOLS_DIR: int
VIR_CONNECT_LIST_STORAGE_POOLS_FS: int
VIR_CONNECT_LIST_STORAGE_POOLS_NETFS: int
VIR_CONNECT_LIST_STORAGE_POOLS_LOGICAL: int
VIR_CONNECT_LIST_STORAGE_POOLS_DISK: int
VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI: int
VIR_CONNECT_LIST_STORAGE_POOLS_SCSI: int
VIR_CONNECT_LIST_STORAGE_POOLS_MPATH: int
VIR_CONNECT_LIST_STORAGE_POOLS_RBD: int
VIR_CONNECT_LIST_STORAGE_POOLS_SHEEPDOG: int
VIR_CONNECT_LIST_STORAGE_POOLS_GLUSTER: int
VIR_CONNECT_LIST_STORAGE_POOLS_ZFS: int
VIR_CONNECT_LIST_STORAGE_POOLS_VSTORAGE: int
VIR_CONNECT_LIST_STORAGE_POOLS_ISCSI_DIRECT: int
VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_BLOCK: int
VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_DEFAULT: int
VIR_DOMAIN_AGENT_RESPONSE_TIMEOUT_NOWAIT: int
VIR_DOMAIN_BACKUP_BEGIN_REUSE_EXTERNAL: int
VIR_DOMAIN_BLOCK_COMMIT_SHALLOW: int
VIR_DOMAIN_BLOCK_COMMIT_DELETE: int
VIR_DOMAIN_BLOCK_COMMIT_ACTIVE: int
VIR_DOMAIN_BLOCK_COMMIT_RELATIVE: int
VIR_DOMAIN_BLOCK_COMMIT_BANDWIDTH_BYTES: int
VIR_DOMAIN_BLOCK_COPY_SHALLOW: int
VIR_DOMAIN_BLOCK_COPY_REUSE_EXT: int
VIR_DOMAIN_BLOCK_COPY_TRANSIENT_JOB: int
VIR_DOMAIN_BLOCK_JOB_ABORT_ASYNC: int
VIR_DOMAIN_BLOCK_JOB_ABORT_PIVOT: int
VIR_DOMAIN_BLOCK_JOB_INFO_BANDWIDTH_BYTES: int
VIR_DOMAIN_BLOCK_JOB_SPEED_BANDWIDTH_BYTES: int
VIR_DOMAIN_BLOCK_JOB_TYPE_UNKNOWN: int
VIR_DOMAIN_BLOCK_JOB_TYPE_PULL: int
VIR_DOMAIN_BLOCK_JOB_TYPE_COPY: int
VIR_DOMAIN_BLOCK_JOB_TYPE_COMMIT: int
VIR_DOMAIN_BLOCK_JOB_TYPE_ACTIVE_COMMIT: int
VIR_DOMAIN_BLOCK_JOB_TYPE_BACKUP: int
VIR_DOMAIN_BLOCK_PULL_BANDWIDTH_BYTES: int
VIR_DOMAIN_BLOCK_REBASE_SHALLOW: int
VIR_DOMAIN_BLOCK_REBASE_REUSE_EXT: int
VIR_DOMAIN_BLOCK_REBASE_COPY_RAW: int
VIR_DOMAIN_BLOCK_REBASE_COPY: int
VIR_DOMAIN_BLOCK_REBASE_RELATIVE: int
VIR_DOMAIN_BLOCK_REBASE_COPY_DEV: int
VIR_DOMAIN_BLOCK_REBASE_BANDWIDTH_BYTES: int
VIR_DOMAIN_BLOCK_RESIZE_BYTES: int
VIR_DOMAIN_BLOCKED_UNKNOWN: int
VIR_DOMAIN_CHANNEL_FORCE: int
VIR_DOMAIN_CHECKPOINT_CREATE_REDEFINE: int
VIR_DOMAIN_CHECKPOINT_CREATE_QUIESCE: int
VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN: int
VIR_DOMAIN_CHECKPOINT_DELETE_METADATA_ONLY: int
VIR_DOMAIN_CHECKPOINT_DELETE_CHILDREN_ONLY: int
VIR_DOMAIN_CHECKPOINT_LIST_DESCENDANTS: int
VIR_DOMAIN_CHECKPOINT_LIST_ROOTS: int
VIR_DOMAIN_CHECKPOINT_LIST_TOPOLOGICAL: int
VIR_DOMAIN_CHECKPOINT_LIST_LEAVES: int
VIR_DOMAIN_CHECKPOINT_LIST_NO_LEAVES: int
VIR_DOMAIN_CHECKPOINT_XML_SECURE: int
VIR_DOMAIN_CHECKPOINT_XML_NO_DOMAIN: int
VIR_DOMAIN_CHECKPOINT_XML_SIZE: int
VIR_DOMAIN_CONSOLE_FORCE: int
VIR_DOMAIN_CONSOLE_SAFE: int
VIR_DOMAIN_CONTROL_ERROR_REASON_NONE: int
VIR_DOMAIN_CONTROL_ERROR_REASON_UNKNOWN: int
VIR_DOMAIN_CONTROL_ERROR_REASON_MONITOR: int
VIR_DOMAIN_CONTROL_ERROR_REASON_INTERNAL: int
VIR_DOMAIN_CONTROL_OK: int
VIR_DOMAIN_CONTROL_JOB: int
VIR_DOMAIN_CONTROL_OCCUPIED: int
VIR_DOMAIN_CONTROL_ERROR: int
VIR_DUMP_CRASH: int
VIR_DUMP_LIVE: int
VIR_DUMP_BYPASS_CACHE: int
VIR_DUMP_RESET: int
VIR_DUMP_MEMORY_ONLY: int
VIR_DOMAIN_CORE_DUMP_FORMAT_RAW: int
VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_ZLIB: int
VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_LZO: int
VIR_DOMAIN_CORE_DUMP_FORMAT_KDUMP_SNAPPY: int
VIR_DOMAIN_CRASHED_UNKNOWN: int
VIR_DOMAIN_CRASHED_PANICKED: int
VIR_DOMAIN_NONE: int
VIR_DOMAIN_START_PAUSED: int
VIR_DOMAIN_START_AUTODESTROY: int
VIR_DOMAIN_START_BYPASS_CACHE: int
VIR_DOMAIN_START_FORCE_BOOT: int
VIR_DOMAIN_START_VALIDATE: int
VIR_DOMAIN_DEFINE_VALIDATE: int
VIR_DOMAIN_DESTROY_DEFAULT: int
VIR_DOMAIN_DESTROY_GRACEFUL: int
VIR_DOMAIN_DEVICE_MODIFY_CURRENT: int
VIR_DOMAIN_DEVICE_MODIFY_LIVE: int
VIR_DOMAIN_DEVICE_MODIFY_CONFIG: int
VIR_DOMAIN_DEVICE_MODIFY_FORCE: int
VIR_DOMAIN_DISK_ERROR_NONE: int
VIR_DOMAIN_DISK_ERROR_UNSPEC: int
VIR_DOMAIN_DISK_ERROR_NO_SPACE: int
VIR_DOMAIN_EVENT_CRASHED_PANICKED: int
VIR_DOMAIN_EVENT_CRASHED_CRASHLOADED: int
VIR_DOMAIN_EVENT_DEFINED_ADDED: int
VIR_DOMAIN_EVENT_DEFINED_UPDATED: int
VIR_DOMAIN_EVENT_DEFINED_RENAMED: int
VIR_DOMAIN_EVENT_DEFINED_FROM_SNAPSHOT: int
VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV4: int
VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_IPV6: int
VIR_DOMAIN_EVENT_GRAPHICS_ADDRESS_UNIX: int
VIR_DOMAIN_EVENT_GRAPHICS_CONNECT: int
VIR_DOMAIN_EVENT_GRAPHICS_INITIALIZE: int
VIR_DOMAIN_EVENT_GRAPHICS_DISCONNECT: int
VIR_DOMAIN_EVENT_ID_LIFECYCLE: int
VIR_DOMAIN_EVENT_ID_REBOOT: int
VIR_DOMAIN_EVENT_ID_RTC_CHANGE: int
VIR_DOMAIN_EVENT_ID_WATCHDOG: int
VIR_DOMAIN_EVENT_ID_IO_ERROR: int
VIR_DOMAIN_EVENT_ID_GRAPHICS: int
VIR_DOMAIN_EVENT_ID_IO_ERROR_REASON: int
VIR_DOMAIN_EVENT_ID_CONTROL_ERROR: int
VIR_DOMAIN_EVENT_ID_BLOCK_JOB: int
VIR_DOMAIN_EVENT_ID_DISK_CHANGE: int
VIR_DOMAIN_EVENT_ID_TRAY_CHANGE: int
VIR_DOMAIN_EVENT_ID_PMWAKEUP: int
VIR_DOMAIN_EVENT_ID_PMSUSPEND: int
VIR_DOMAIN_EVENT_ID_BALLOON_CHANGE: int
VIR_DOMAIN_EVENT_ID_PMSUSPEND_DISK: int
VIR_DOMAIN_EVENT_ID_DEVICE_REMOVED: int
VIR_DOMAIN_EVENT_ID_BLOCK_JOB_2: int
VIR_DOMAIN_EVENT_ID_TUNABLE: int
VIR_DOMAIN_EVENT_ID_AGENT_LIFECYCLE: int
VIR_DOMAIN_EVENT_ID_DEVICE_ADDED: int
VIR_DOMAIN_EVENT_ID_MIGRATION_ITERATION: int
VIR_DOMAIN_EVENT_ID_JOB_COMPLETED: int
VIR_DOMAIN_EVENT_ID_DEVICE_REMOVAL_FAILED: int
VIR_DOMAIN_EVENT_ID_METADATA_CHANGE: int
VIR_DOMAIN_EVENT_ID_BLOCK_THRESHOLD: int
VIR_DOMAIN_EVENT_IO_ERROR_NONE: int
VIR_DOMAIN_EVENT_IO_ERROR_PAUSE: int
VIR_DOMAIN_EVENT_IO_ERROR_REPORT: int
VIR_DOMAIN_EVENT_PMSUSPENDED_MEMORY: int
VIR_DOMAIN_EVENT_PMSUSPENDED_DISK: int
VIR_DOMAIN_EVENT_RESUMED_UNPAUSED: int
VIR_DOMAIN_EVENT_RESUMED_MIGRATED: int
VIR_DOMAIN_EVENT_RESUMED_FROM_SNAPSHOT: int
VIR_DOMAIN_EVENT_RESUMED_POSTCOPY: int
VIR_DOMAIN_EVENT_SHUTDOWN_FINISHED: int
VIR_DOMAIN_EVENT_SHUTDOWN_GUEST: int
VIR_DOMAIN_EVENT_SHUTDOWN_HOST: int
VIR_DOMAIN_EVENT_STARTED_BOOTED: int
VIR_DOMAIN_EVENT_STARTED_MIGRATED: int
VIR_DOMAIN_EVENT_STARTED_RESTORED: int
VIR_DOMAIN_EVENT_STARTED_FROM_SNAPSHOT: int
VIR_DOMAIN_EVENT_STARTED_WAKEUP: int
VIR_DOMAIN_EVENT_STOPPED_SHUTDOWN: int
VIR_DOMAIN_EVENT_STOPPED_DESTROYED: int
VIR_DOMAIN_EVENT_STOPPED_CRASHED: int
VIR_DOMAIN_EVENT_STOPPED_MIGRATED: int
VIR_DOMAIN_EVENT_STOPPED_SAVED: int
VIR_DOMAIN_EVENT_STOPPED_FAILED: int
VIR_DOMAIN_EVENT_STOPPED_FROM_SNAPSHOT: int
VIR_DOMAIN_EVENT_SUSPENDED_PAUSED: int
VIR_DOMAIN_EVENT_SUSPENDED_MIGRATED: int
VIR_DOMAIN_EVENT_SUSPENDED_IOERROR: int
VIR_DOMAIN_EVENT_SUSPENDED_WATCHDOG: int
VIR_DOMAIN_EVENT_SUSPENDED_RESTORED: int
VIR_DOMAIN_EVENT_SUSPENDED_FROM_SNAPSHOT: int
VIR_DOMAIN_EVENT_SUSPENDED_API_ERROR: int
VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY: int
VIR_DOMAIN_EVENT_SUSPENDED_POSTCOPY_FAILED: int
VIR_DOMAIN_EVENT_TRAY_CHANGE_OPEN: int
VIR_DOMAIN_EVENT_TRAY_CHANGE_CLOSE: int
VIR_DOMAIN_EVENT_DEFINED: int
VIR_DOMAIN_EVENT_UNDEFINED: int
VIR_DOMAIN_EVENT_STARTED: int
VIR_DOMAIN_EVENT_SUSPENDED: int
VIR_DOMAIN_EVENT_RESUMED: int
VIR_DOMAIN_EVENT_STOPPED: int
VIR_DOMAIN_EVENT_SHUTDOWN: int
VIR_DOMAIN_EVENT_PMSUSPENDED: int
VIR_DOMAIN_EVENT_CRASHED: int
VIR_DOMAIN_EVENT_UNDEFINED_REMOVED: int
VIR_DOMAIN_EVENT_UNDEFINED_RENAMED: int
VIR_DOMAIN_EVENT_WATCHDOG_NONE: int
VIR_DOMAIN_EVENT_WATCHDOG_PAUSE: int
VIR_DOMAIN_EVENT_WATCHDOG_RESET: int
VIR_DOMAIN_EVENT_WATCHDOG_POWEROFF: int
VIR_DOMAIN_EVENT_WATCHDOG_SHUTDOWN: int
VIR_DOMAIN_EVENT_WATCHDOG_DEBUG: int
VIR_DOMAIN_EVENT_WATCHDOG_INJECTNMI: int
VIR_DOMAIN_GET_HOSTNAME_LEASE: int
VIR_DOMAIN_GET_HOSTNAME_AGENT: int
VIR_DOMAIN_JOB_STATS_COMPLETED: int
VIR_DOMAIN_JOB_STATS_KEEP_COMPLETED: int
VIR_DOMAIN_GUEST_INFO_USERS: int
VIR_DOMAIN_GUEST_INFO_OS: int
VIR_DOMAIN_GUEST_INFO_TIMEZONE: int
VIR_DOMAIN_GUEST_INFO_HOSTNAME: int
VIR_DOMAIN_GUEST_INFO_FILESYSTEM: int
VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_LEASE: int
VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_AGENT: int
VIR_DOMAIN_INTERFACE_ADDRESSES_SRC_ARP: int
VIR_DOMAIN_JOB_OPERATION_UNKNOWN: int
VIR_DOMAIN_JOB_OPERATION_START: int
VIR_DOMAIN_JOB_OPERATION_SAVE: int
VIR_DOMAIN_JOB_OPERATION_RESTORE: int
VIR_DOMAIN_JOB_OPERATION_MIGRATION_IN: int
VIR_DOMAIN_JOB_OPERATION_MIGRATION_OUT: int
VIR_DOMAIN_JOB_OPERATION_SNAPSHOT: int
VIR_DOMAIN_JOB_OPERATION_SNAPSHOT_REVERT: int
VIR_DOMAIN_JOB_OPERATION_DUMP: int
VIR_DOMAIN_JOB_OPERATION_BACKUP: int
VIR_DOMAIN_JOB_NONE: int
VIR_DOMAIN_JOB_BOUNDED: int
VIR_DOMAIN_JOB_UNBOUNDED: int
VIR_DOMAIN_JOB_COMPLETED: int
VIR_DOMAIN_JOB_FAILED: int
VIR_DOMAIN_JOB_CANCELLED: int
VIR_DOMAIN_LIFECYCLE_POWEROFF: int
VIR_DOMAIN_LIFECYCLE_REBOOT: int
VIR_DOMAIN_LIFECYCLE_CRASH: int
VIR_DOMAIN_LIFECYCLE_ACTION_DESTROY: int
VIR_DOMAIN_LIFECYCLE_ACTION_RESTART: int
VIR_DOMAIN_LIFECYCLE_ACTION_RESTART_RENAME: int
VIR_DOMAIN_LIFECYCLE_ACTION_PRESERVE: int
VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_DESTROY: int
VIR_DOMAIN_LIFECYCLE_ACTION_COREDUMP_RESTART: int
VIR_MEMORY_VIRTUAL: int
VIR_MEMORY_PHYSICAL: int
VIR_DOMAIN_MEM_CURRENT: int
VIR_DOMAIN_MEM_LIVE: int
VIR_DOMAIN_MEM_CONFIG: int
VIR_DOMAIN_MEM_MAXIMUM: int
VIR_DOMAIN_MEMORY_STAT_SWAP_IN: int
VIR_DOMAIN_MEMORY_STAT_SWAP_OUT: int
VIR_DOMAIN_MEMORY_STAT_MAJOR_FAULT: int
VIR_DOMAIN_MEMORY_STAT_MINOR_FAULT: int
VIR_DOMAIN_MEMORY_STAT_UNUSED: int
VIR_DOMAIN_MEMORY_STAT_AVAILABLE: int
VIR_DOMAIN_MEMORY_STAT_ACTUAL_BALLOON: int
VIR_DOMAIN_MEMORY_STAT_RSS: int
VIR_DOMAIN_MEMORY_STAT_USABLE: int
VIR_DOMAIN_MEMORY_STAT_LAST_UPDATE: int
VIR_DOMAIN_MEMORY_STAT_DISK_CACHES: int
VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGALLOC: int
VIR_DOMAIN_MEMORY_STAT_HUGETLB_PGFAIL: int
VIR_DOMAIN_MEMORY_STAT_LAST: int
VIR_DOMAIN_MEMORY_STAT_NR: int
VIR_DOMAIN_METADATA_DESCRIPTION: int
VIR_DOMAIN_METADATA_TITLE: int
VIR_DOMAIN_METADATA_ELEMENT: int
VIR_MIGRATE_LIVE: int
VIR_MIGRATE_PEER2PEER: int
VIR_MIGRATE_TUNNELLED: int
VIR_MIGRATE_PERSIST_DEST: int
VIR_MIGRATE_UNDEFINE_SOURCE: int
VIR_MIGRATE_PAUSED: int
VIR_MIGRATE_NON_SHARED_DISK: int
VIR_MIGRATE_NON_SHARED_INC: int
VIR_MIGRATE_CHANGE_PROTECTION: int
VIR_MIGRATE_UNSAFE: int
VIR_MIGRATE_OFFLINE: int
VIR_MIGRATE_COMPRESSED: int
VIR_MIGRATE_ABORT_ON_ERROR: int
VIR_MIGRATE_AUTO_CONVERGE: int
VIR_MIGRATE_RDMA_PIN_ALL: int
VIR_MIGRATE_POSTCOPY: int
VIR_MIGRATE_TLS: int
VIR_MIGRATE_PARALLEL: int
VIR_DOMAIN_MIGRATE_MAX_SPEED_POSTCOPY: int
VIR_DOMAIN_AFFECT_CURRENT: int
VIR_DOMAIN_AFFECT_LIVE: int
VIR_DOMAIN_AFFECT_CONFIG: int
VIR_DOMAIN_NOSTATE_UNKNOWN: int
VIR_DOMAIN_NUMATUNE_MEM_STRICT: int
VIR_DOMAIN_NUMATUNE_MEM_PREFERRED: int
VIR_DOMAIN_NUMATUNE_MEM_INTERLEAVE: int
VIR_DOMAIN_OPEN_GRAPHICS_SKIPAUTH: int
VIR_DOMAIN_PMSUSPENDED_DISK_UNKNOWN: int
VIR_DOMAIN_PMSUSPENDED_UNKNOWN: int
VIR_DOMAIN_PAUSED_UNKNOWN: int
VIR_DOMAIN_PAUSED_USER: int
VIR_DOMAIN_PAUSED_MIGRATION: int
VIR_DOMAIN_PAUSED_SAVE: int
VIR_DOMAIN_PAUSED_DUMP: int
VIR_DOMAIN_PAUSED_IOERROR: int
VIR_DOMAIN_PAUSED_WATCHDOG: int
VIR_DOMAIN_PAUSED_FROM_SNAPSHOT: int
VIR_DOMAIN_PAUSED_SHUTTING_DOWN: int
VIR_DOMAIN_PAUSED_SNAPSHOT: int
VIR_DOMAIN_PAUSED_CRASHED: int
VIR_DOMAIN_PAUSED_STARTING_UP: int
VIR_DOMAIN_PAUSED_POSTCOPY: int
VIR_DOMAIN_PAUSED_POSTCOPY_FAILED: int
VIR_DOMAIN_PROCESS_SIGNAL_NOP: int
VIR_DOMAIN_PROCESS_SIGNAL_HUP: int
VIR_DOMAIN_PROCESS_SIGNAL_INT: int
VIR_DOMAIN_PROCESS_SIGNAL_QUIT: int
VIR_DOMAIN_PROCESS_SIGNAL_ILL: int
VIR_DOMAIN_PROCESS_SIGNAL_TRAP: int
VIR_DOMAIN_PROCESS_SIGNAL_ABRT: int
VIR_DOMAIN_PROCESS_SIGNAL_BUS: int
VIR_DOMAIN_PROCESS_SIGNAL_FPE: int
VIR_DOMAIN_PROCESS_SIGNAL_KILL: int
VIR_DOMAIN_PROCESS_SIGNAL_USR1: int
VIR_DOMAIN_PROCESS_SIGNAL_SEGV: int
VIR_DOMAIN_PROCESS_SIGNAL_USR2: int
VIR_DOMAIN_PROCESS_SIGNAL_PIPE: int
VIR_DOMAIN_PROCESS_SIGNAL_ALRM: int
VIR_DOMAIN_PROCESS_SIGNAL_TERM: int
VIR_DOMAIN_PROCESS_SIGNAL_STKFLT: int
VIR_DOMAIN_PROCESS_SIGNAL_CHLD: int
VIR_DOMAIN_PROCESS_SIGNAL_CONT: int
VIR_DOMAIN_PROCESS_SIGNAL_STOP: int
VIR_DOMAIN_PROCESS_SIGNAL_TSTP: int
VIR_DOMAIN_PROCESS_SIGNAL_TTIN: int
VIR_DOMAIN_PROCESS_SIGNAL_TTOU: int
VIR_DOMAIN_PROCESS_SIGNAL_URG: int
VIR_DOMAIN_PROCESS_SIGNAL_XCPU: int
VIR_DOMAIN_PROCESS_SIGNAL_XFSZ: int
VIR_DOMAIN_PROCESS_SIGNAL_VTALRM: int
VIR_DOMAIN_PROCESS_SIGNAL_PROF: int
VIR_DOMAIN_PROCESS_SIGNAL_WINCH: int
VIR_DOMAIN_PROCESS_SIGNAL_POLL: int
VIR_DOMAIN_PROCESS_SIGNAL_PWR: int
VIR_DOMAIN_PROCESS_SIGNAL_SYS: int
VIR_DOMAIN_PROCESS_SIGNAL_RT0: int
VIR_DOMAIN_PROCESS_SIGNAL_RT1: int
VIR_DOMAIN_PROCESS_SIGNAL_RT2: int
VIR_DOMAIN_PROCESS_SIGNAL_RT3: int
VIR_DOMAIN_PROCESS_SIGNAL_RT4: int
VIR_DOMAIN_PROCESS_SIGNAL_RT5: int
VIR_DOMAIN_PROCESS_SIGNAL_RT6: int
VIR_DOMAIN_PROCESS_SIGNAL_RT7: int
VIR_DOMAIN_PROCESS_SIGNAL_RT8: int
VIR_DOMAIN_PROCESS_SIGNAL_RT9: int
VIR_DOMAIN_PROCESS_SIGNAL_RT10: int
VIR_DOMAIN_PROCESS_SIGNAL_RT11: int
VIR_DOMAIN_PROCESS_SIGNAL_RT12: int
VIR_DOMAIN_PROCESS_SIGNAL_RT13: int
VIR_DOMAIN_PROCESS_SIGNAL_RT14: int
VIR_DOMAIN_PROCESS_SIGNAL_RT15: int
VIR_DOMAIN_PROCESS_SIGNAL_RT16: int
VIR_DOMAIN_PROCESS_SIGNAL_RT17: int
VIR_DOMAIN_PROCESS_SIGNAL_RT18: int
VIR_DOMAIN_PROCESS_SIGNAL_RT19: int
VIR_DOMAIN_PROCESS_SIGNAL_RT20: int
VIR_DOMAIN_PROCESS_SIGNAL_RT21: int
VIR_DOMAIN_PROCESS_SIGNAL_RT22: int
VIR_DOMAIN_PROCESS_SIGNAL_RT23: int
VIR_DOMAIN_PROCESS_SIGNAL_RT24: int
VIR_DOMAIN_PROCESS_SIGNAL_RT25: int
VIR_DOMAIN_PROCESS_SIGNAL_RT26: int
VIR_DOMAIN_PROCESS_SIGNAL_RT27: int
VIR_DOMAIN_PROCESS_SIGNAL_RT28: int
VIR_DOMAIN_PROCESS_SIGNAL_RT29: int
VIR_DOMAIN_PROCESS_SIGNAL_RT30: int
VIR_DOMAIN_PROCESS_SIGNAL_RT31: int
VIR_DOMAIN_PROCESS_SIGNAL_RT32: int
VIR_DOMAIN_REBOOT_DEFAULT: int
VIR_DOMAIN_REBOOT_ACPI_POWER_BTN: int
VIR_DOMAIN_REBOOT_GUEST_AGENT: int
VIR_DOMAIN_REBOOT_INITCTL: int
VIR_DOMAIN_REBOOT_SIGNAL: int
VIR_DOMAIN_REBOOT_PARAVIRT: int
VIR_DOMAIN_RUNNING_UNKNOWN: int
VIR_DOMAIN_RUNNING_BOOTED: int
VIR_DOMAIN_RUNNING_MIGRATED: int
VIR_DOMAIN_RUNNING_RESTORED: int
VIR_DOMAIN_RUNNING_FROM_SNAPSHOT: int
VIR_DOMAIN_RUNNING_UNPAUSED: int
VIR_DOMAIN_RUNNING_MIGRATION_CANCELED: int
VIR_DOMAIN_RUNNING_SAVE_CANCELED: int
VIR_DOMAIN_RUNNING_WAKEUP: int
VIR_DOMAIN_RUNNING_CRASHED: int
VIR_DOMAIN_RUNNING_POSTCOPY: int
VIR_DOMAIN_SAVE_IMAGE_XML_SECURE: int
VIR_DOMAIN_SAVE_BYPASS_CACHE: int
VIR_DOMAIN_SAVE_RUNNING: int
VIR_DOMAIN_SAVE_PAUSED: int
VIR_DOMAIN_TIME_SYNC: int
VIR_DOMAIN_PASSWORD_ENCRYPTED: int
VIR_DOMAIN_SHUTDOWN_DEFAULT: int
VIR_DOMAIN_SHUTDOWN_ACPI_POWER_BTN: int
VIR_DOMAIN_SHUTDOWN_GUEST_AGENT: int
VIR_DOMAIN_SHUTDOWN_INITCTL: int
VIR_DOMAIN_SHUTDOWN_SIGNAL: int
VIR_DOMAIN_SHUTDOWN_PARAVIRT: int
VIR_DOMAIN_SHUTDOWN_UNKNOWN: int
VIR_DOMAIN_SHUTDOWN_USER: int
VIR_DOMAIN_SHUTOFF_UNKNOWN: int
VIR_DOMAIN_SHUTOFF_SHUTDOWN: int
VIR_DOMAIN_SHUTOFF_DESTROYED: int
VIR_DOMAIN_SHUTOFF_CRASHED: int
VIR_DOMAIN_SHUTOFF_MIGRATED: int
VIR_DOMAIN_SHUTOFF_SAVED: int
VIR_DOMAIN_SHUTOFF_FAILED: int
VIR_DOMAIN_SHUTOFF_FROM_SNAPSHOT: int
VIR_DOMAIN_SHUTOFF_DAEMON: int
VIR_DOMAIN_SNAPSHOT_CREATE_REDEFINE: int
VIR_DOMAIN_SNAPSHOT_CREATE_CURRENT: int
VIR_DOMAIN_SNAPSHOT_CREATE_NO_METADATA: int
VIR_DOMAIN_SNAPSHOT_CREATE_HALT: int
VIR_DOMAIN_SNAPSHOT_CREATE_DISK_ONLY: int
VIR_DOMAIN_SNAPSHOT_CREATE_REUSE_EXT: int
VIR_DOMAIN_SNAPSHOT_CREATE_QUIESCE: int
VIR_DOMAIN_SNAPSHOT_CREATE_ATOMIC: int
VIR_DOMAIN_SNAPSHOT_CREATE_LIVE: int
VIR_DOMAIN_SNAPSHOT_CREATE_VALIDATE: int
VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN: int
VIR_DOMAIN_SNAPSHOT_DELETE_METADATA_ONLY: int
VIR_DOMAIN_SNAPSHOT_DELETE_CHILDREN_ONLY: int
VIR_DOMAIN_SNAPSHOT_LIST_DESCENDANTS: int
VIR_DOMAIN_SNAPSHOT_LIST_ROOTS: int
VIR_DOMAIN_SNAPSHOT_LIST_METADATA: int
VIR_DOMAIN_SNAPSHOT_LIST_LEAVES: int
VIR_DOMAIN_SNAPSHOT_LIST_NO_LEAVES: int
VIR_DOMAIN_SNAPSHOT_LIST_NO_METADATA: int
VIR_DOMAIN_SNAPSHOT_LIST_INACTIVE: int
VIR_DOMAIN_SNAPSHOT_LIST_ACTIVE: int
VIR_DOMAIN_SNAPSHOT_LIST_DISK_ONLY: int
VIR_DOMAIN_SNAPSHOT_LIST_INTERNAL: int
VIR_DOMAIN_SNAPSHOT_LIST_EXTERNAL: int
VIR_DOMAIN_SNAPSHOT_LIST_TOPOLOGICAL: int
VIR_DOMAIN_SNAPSHOT_REVERT_RUNNING: int
VIR_DOMAIN_SNAPSHOT_REVERT_PAUSED: int
VIR_DOMAIN_SNAPSHOT_REVERT_FORCE: int
VIR_DOMAIN_SNAPSHOT_XML_SECURE: int
VIR_DOMAIN_NOSTATE: int
VIR_DOMAIN_RUNNING: int
VIR_DOMAIN_BLOCKED: int
VIR_DOMAIN_PAUSED: int
VIR_DOMAIN_SHUTDOWN: int
VIR_DOMAIN_SHUTOFF: int
VIR_DOMAIN_CRASHED: int
VIR_DOMAIN_PMSUSPENDED: int
VIR_DOMAIN_STATS_STATE: int
VIR_DOMAIN_STATS_CPU_TOTAL: int
VIR_DOMAIN_STATS_BALLOON: int
VIR_DOMAIN_STATS_VCPU: int
VIR_DOMAIN_STATS_INTERFACE: int
VIR_DOMAIN_STATS_BLOCK: int
VIR_DOMAIN_STATS_PERF: int
VIR_DOMAIN_STATS_IOTHREAD: int
VIR_DOMAIN_STATS_MEMORY: int
VIR_DOMAIN_UNDEFINE_MANAGED_SAVE: int
VIR_DOMAIN_UNDEFINE_SNAPSHOTS_METADATA: int
VIR_DOMAIN_UNDEFINE_NVRAM: int
VIR_DOMAIN_UNDEFINE_KEEP_NVRAM: int
VIR_DOMAIN_UNDEFINE_CHECKPOINTS_METADATA: int
VIR_DOMAIN_VCPU_CURRENT: int
VIR_DOMAIN_VCPU_LIVE: int
VIR_DOMAIN_VCPU_CONFIG: int
VIR_DOMAIN_VCPU_MAXIMUM: int
VIR_DOMAIN_VCPU_GUEST: int
VIR_DOMAIN_VCPU_HOTPLUGGABLE: int
VIR_DOMAIN_XML_SECURE: int
VIR_DOMAIN_XML_INACTIVE: int
VIR_DOMAIN_XML_UPDATE_CPU: int
VIR_DOMAIN_XML_MIGRATABLE: int
VIR_FROM_NONE: int
VIR_FROM_XEN: int
VIR_FROM_XEND: int
VIR_FROM_XENSTORE: int
VIR_FROM_SEXPR: int
VIR_FROM_XML: int
VIR_FROM_DOM: int
VIR_FROM_RPC: int
VIR_FROM_PROXY: int
VIR_FROM_CONF: int
VIR_FROM_QEMU: int
VIR_FROM_NET: int
VIR_FROM_TEST: int
VIR_FROM_REMOTE: int
VIR_FROM_OPENVZ: int
VIR_FROM_XENXM: int
VIR_FROM_STATS_LINUX: int
VIR_FROM_LXC: int
VIR_FROM_STORAGE: int
VIR_FROM_NETWORK: int
VIR_FROM_DOMAIN: int
VIR_FROM_UML: int
VIR_FROM_NODEDEV: int
VIR_FROM_XEN_INOTIFY: int
VIR_FROM_SECURITY: int
VIR_FROM_VBOX: int
VIR_FROM_INTERFACE: int
VIR_FROM_ONE: int
VIR_FROM_ESX: int
VIR_FROM_PHYP: int
VIR_FROM_SECRET: int
VIR_FROM_CPU: int
VIR_FROM_XENAPI: int
VIR_FROM_NWFILTER: int
VIR_FROM_HOOK: int
VIR_FROM_DOMAIN_SNAPSHOT: int
VIR_FROM_AUDIT: int
VIR_FROM_SYSINFO: int
VIR_FROM_STREAMS: int
VIR_FROM_VMWARE: int
VIR_FROM_EVENT: int
VIR_FROM_LIBXL: int
VIR_FROM_LOCKING: int
VIR_FROM_HYPERV: int
VIR_FROM_CAPABILITIES: int
VIR_FROM_URI: int
VIR_FROM_AUTH: int
VIR_FROM_DBUS: int
VIR_FROM_PARALLELS: int
VIR_FROM_DEVICE: int
VIR_FROM_SSH: int
VIR_FROM_LOCKSPACE: int
VIR_FROM_INITCTL: int
VIR_FROM_IDENTITY: int
VIR_FROM_CGROUP: int
VIR_FROM_ACCESS: int
VIR_FROM_SYSTEMD: int
VIR_FROM_BHYVE: int
VIR_FROM_CRYPTO: int
VIR_FROM_FIREWALL: int
VIR_FROM_POLKIT: int
VIR_FROM_THREAD: int
VIR_FROM_ADMIN: int
VIR_FROM_LOGGING: int
VIR_FROM_XENXL: int
VIR_FROM_PERF: int
VIR_FROM_LIBSSH: int
VIR_FROM_RESCTRL: int
VIR_FROM_FIREWALLD: int
VIR_FROM_DOMAIN_CHECKPOINT: int
VIR_FROM_TPM: int
VIR_FROM_BPF: int
VIR_ERR_NONE: int
VIR_ERR_WARNING: int
VIR_ERR_ERROR: int
VIR_ERR_OK: int
VIR_ERR_INTERNAL_ERROR: int
VIR_ERR_NO_MEMORY: int
VIR_ERR_NO_SUPPORT: int
VIR_ERR_UNKNOWN_HOST: int
VIR_ERR_NO_CONNECT: int
VIR_ERR_INVALID_CONN: int
VIR_ERR_INVALID_DOMAIN: int
VIR_ERR_INVALID_ARG: int
VIR_ERR_OPERATION_FAILED: int
VIR_ERR_GET_FAILED: int
VIR_ERR_POST_FAILED: int
VIR_ERR_HTTP_ERROR: int
VIR_ERR_SEXPR_SERIAL: int
VIR_ERR_NO_XEN: int
VIR_ERR_XEN_CALL: int
VIR_ERR_OS_TYPE: int
VIR_ERR_NO_KERNEL: int
VIR_ERR_NO_ROOT: int
VIR_ERR_NO_SOURCE: int
VIR_ERR_NO_TARGET: int
VIR_ERR_NO_NAME: int
VIR_ERR_NO_OS: int
VIR_ERR_NO_DEVICE: int
VIR_ERR_NO_XENSTORE: int
VIR_ERR_DRIVER_FULL: int
VIR_ERR_CALL_FAILED: int
VIR_ERR_XML_ERROR: int
VIR_ERR_DOM_EXIST: int
VIR_ERR_OPERATION_DENIED: int
VIR_ERR_OPEN_FAILED: int
VIR_ERR_READ_FAILED: int
VIR_ERR_PARSE_FAILED: int
VIR_ERR_CONF_SYNTAX: int
VIR_ERR_WRITE_FAILED: int
VIR_ERR_XML_DETAIL: int
VIR_ERR_INVALID_NETWORK: int
VIR_ERR_NETWORK_EXIST: int
VIR_ERR_SYSTEM_ERROR: int
VIR_ERR_RPC: int
VIR_ERR_GNUTLS_ERROR: int
VIR_WAR_NO_NETWORK: int
VIR_ERR_NO_DOMAIN: int
VIR_ERR_NO_NETWORK: int
VIR_ERR_INVALID_MAC: int
VIR_ERR_AUTH_FAILED: int
VIR_ERR_INVALID_STORAGE_POOL: int
VIR_ERR_INVALID_STORAGE_VOL: int
VIR_WAR_NO_STORAGE: int
VIR_ERR_NO_STORAGE_POOL: int
VIR_ERR_NO_STORAGE_VOL: int
VIR_WAR_NO_NODE: int
VIR_ERR_INVALID_NODE_DEVICE: int
VIR_ERR_NO_NODE_DEVICE: int
VIR_ERR_NO_SECURITY_MODEL: int
VIR_ERR_OPERATION_INVALID: int
VIR_WAR_NO_INTERFACE: int
VIR_ERR_NO_INTERFACE: int
VIR_ERR_INVALID_INTERFACE: int
VIR_ERR_MULTIPLE_INTERFACES: int
VIR_WAR_NO_NWFILTER: int
VIR_ERR_INVALID_NWFILTER: int
VIR_ERR_NO_NWFILTER: int
VIR_ERR_BUILD_FIREWALL: int
VIR_WAR_NO_SECRET: int
VIR_ERR_INVALID_SECRET: int
VIR_ERR_NO_SECRET: int
VIR_ERR_CONFIG_UNSUPPORTED: int
VIR_ERR_OPERATION_TIMEOUT: int
VIR_ERR_MIGRATE_PERSIST_FAILED: int
VIR_ERR_HOOK_SCRIPT_FAILED: int
VIR_ERR_INVALID_DOMAIN_SNAPSHOT: int
VIR_ERR_NO_DOMAIN_SNAPSHOT: int
VIR_ERR_INVALID_STREAM: int
VIR_ERR_ARGUMENT_UNSUPPORTED: int
VIR_ERR_STORAGE_PROBE_FAILED: int
VIR_ERR_STORAGE_POOL_BUILT: int
VIR_ERR_SNAPSHOT_REVERT_RISKY: int
VIR_ERR_OPERATION_ABORTED: int
VIR_ERR_AUTH_CANCELLED: int
VIR_ERR_NO_DOMAIN_METADATA: int
VIR_ERR_MIGRATE_UNSAFE: int
VIR_ERR_OVERFLOW: int
VIR_ERR_BLOCK_COPY_ACTIVE: int
VIR_ERR_OPERATION_UNSUPPORTED: int
VIR_ERR_SSH: int
VIR_ERR_AGENT_UNRESPONSIVE: int
VIR_ERR_RESOURCE_BUSY: int
VIR_ERR_ACCESS_DENIED: int
VIR_ERR_DBUS_SERVICE: int
VIR_ERR_STORAGE_VOL_EXIST: int
VIR_ERR_CPU_INCOMPATIBLE: int
VIR_ERR_XML_INVALID_SCHEMA: int
VIR_ERR_MIGRATE_FINISH_OK: int
VIR_ERR_AUTH_UNAVAILABLE: int
VIR_ERR_NO_SERVER: int
VIR_ERR_NO_CLIENT: int
VIR_ERR_AGENT_UNSYNCED: int
VIR_ERR_LIBSSH: int
VIR_ERR_DEVICE_MISSING: int
VIR_ERR_INVALID_NWFILTER_BINDING: int
VIR_ERR_NO_NWFILTER_BINDING: int
VIR_ERR_INVALID_DOMAIN_CHECKPOINT: int
VIR_ERR_NO_DOMAIN_CHECKPOINT: int
VIR_ERR_NO_DOMAIN_BACKUP: int
VIR_ERR_INVALID_NETWORK_PORT: int
VIR_ERR_NETWORK_PORT_EXIST: int
VIR_ERR_NO_NETWORK_PORT: int
VIR_ERR_NO_HOSTNAME: int
VIR_EVENT_HANDLE_READABLE: int
VIR_EVENT_HANDLE_WRITABLE: int
VIR_EVENT_HANDLE_ERROR: int
VIR_EVENT_HANDLE_HANGUP: int
VIR_IP_ADDR_TYPE_IPV4: int
VIR_IP_ADDR_TYPE_IPV6: int
VIR_INTERFACE_XML_INACTIVE: int
VIR_KEYCODE_SET_LINUX: int
VIR_KEYCODE_SET_XT: int
VIR_KEYCODE_SET_ATSET1: int
VIR_KEYCODE_SET_ATSET2: int
VIR_KEYCODE_SET_ATSET3: int
VIR_KEYCODE_SET_OSX: int
VIR_KEYCODE_SET_XT_KBD: int
VIR_KEYCODE_SET_USB: int
VIR_KEYCODE_SET_WIN32: int
VIR_KEYCODE_SET_QNUM: int
VIR_DOMAIN_MEMORY_PARAM_INT: int
VIR_DOMAIN_MEMORY_PARAM_UINT: int
VIR_DOMAIN_MEMORY_PARAM_LLONG: int
VIR_DOMAIN_MEMORY_PARAM_ULLONG: int
VIR_DOMAIN_MEMORY_PARAM_DOUBLE: int
VIR_DOMAIN_MEMORY_PARAM_BOOLEAN: int
VIR_NETWORK_EVENT_ID_LIFECYCLE: int
VIR_NETWORK_EVENT_DEFINED: int
VIR_NETWORK_EVENT_UNDEFINED: int
VIR_NETWORK_EVENT_STARTED: int
VIR_NETWORK_EVENT_STOPPED: int
VIR_NETWORK_PORT_CREATE_RECLAIM: int
VIR_NETWORK_UPDATE_COMMAND_NONE: int
VIR_NETWORK_UPDATE_COMMAND_MODIFY: int
VIR_NETWORK_UPDATE_COMMAND_DELETE: int
VIR_NETWORK_UPDATE_COMMAND_ADD_LAST: int
VIR_NETWORK_UPDATE_COMMAND_ADD_FIRST: int
VIR_NETWORK_UPDATE_AFFECT_CURRENT: int
VIR_NETWORK_UPDATE_AFFECT_LIVE: int
VIR_NETWORK_UPDATE_AFFECT_CONFIG: int
VIR_NETWORK_SECTION_NONE: int
VIR_NETWORK_SECTION_BRIDGE: int
VIR_NETWORK_SECTION_DOMAIN: int
VIR_NETWORK_SECTION_IP: int
VIR_NETWORK_SECTION_IP_DHCP_HOST: int
VIR_NETWORK_SECTION_IP_DHCP_RANGE: int
VIR_NETWORK_SECTION_FORWARD: int
VIR_NETWORK_SECTION_FORWARD_INTERFACE: int
VIR_NETWORK_SECTION_FORWARD_PF: int
VIR_NETWORK_SECTION_PORTGROUP: int
VIR_NETWORK_SECTION_DNS_HOST: int
VIR_NETWORK_SECTION_DNS_TXT: int
VIR_NETWORK_SECTION_DNS_SRV: int
VIR_NETWORK_XML_INACTIVE: int
VIR_NODE_ALLOC_PAGES_ADD: int
VIR_NODE_ALLOC_PAGES_SET: int
VIR_NODE_DEVICE_EVENT_ID_LIFECYCLE: int
VIR_NODE_DEVICE_EVENT_ID_UPDATE: int
VIR_NODE_DEVICE_EVENT_CREATED: int
VIR_NODE_DEVICE_EVENT_DELETED: int
VIR_NODE_CPU_STATS_ALL_CPUS: int
VIR_NODE_MEMORY_STATS_ALL_CELLS: int
VIR_NODE_SUSPEND_TARGET_MEM: int
VIR_NODE_SUSPEND_TARGET_DISK: int
VIR_NODE_SUSPEND_TARGET_HYBRID: int
VIR_DOMAIN_SCHED_FIELD_INT: int
VIR_DOMAIN_SCHED_FIELD_UINT: int
VIR_DOMAIN_SCHED_FIELD_LLONG: int
VIR_DOMAIN_SCHED_FIELD_ULLONG: int
VIR_DOMAIN_SCHED_FIELD_DOUBLE: int
VIR_DOMAIN_SCHED_FIELD_BOOLEAN: int
VIR_SECRET_EVENT_ID_LIFECYCLE: int
VIR_SECRET_EVENT_ID_VALUE_CHANGED: int
VIR_SECRET_EVENT_DEFINED: int
VIR_SECRET_EVENT_UNDEFINED: int
VIR_SECRET_USAGE_TYPE_NONE: int
VIR_SECRET_USAGE_TYPE_VOLUME: int
VIR_SECRET_USAGE_TYPE_CEPH: int
VIR_SECRET_USAGE_TYPE_ISCSI: int
VIR_SECRET_USAGE_TYPE_TLS: int
VIR_SECRET_USAGE_TYPE_VTPM: int
VIR_STORAGE_POOL_BUILD_NEW: int
VIR_STORAGE_POOL_BUILD_REPAIR: int
VIR_STORAGE_POOL_BUILD_RESIZE: int
VIR_STORAGE_POOL_BUILD_NO_OVERWRITE: int
VIR_STORAGE_POOL_BUILD_OVERWRITE: int
VIR_STORAGE_POOL_CREATE_NORMAL: int
VIR_STORAGE_POOL_CREATE_WITH_BUILD: int
VIR_STORAGE_POOL_CREATE_WITH_BUILD_OVERWRITE: int
VIR_STORAGE_POOL_CREATE_WITH_BUILD_NO_OVERWRITE: int
VIR_STORAGE_POOL_DELETE_NORMAL: int
VIR_STORAGE_POOL_DELETE_ZEROED: int
VIR_STORAGE_POOL_EVENT_ID_LIFECYCLE: int
VIR_STORAGE_POOL_EVENT_ID_REFRESH: int
VIR_STORAGE_POOL_EVENT_DEFINED: int
VIR_STORAGE_POOL_EVENT_UNDEFINED: int
VIR_STORAGE_POOL_EVENT_STARTED: int
VIR_STORAGE_POOL_EVENT_STOPPED: int
VIR_STORAGE_POOL_EVENT_CREATED: int
VIR_STORAGE_POOL_EVENT_DELETED: int
VIR_STORAGE_POOL_INACTIVE: int
VIR_STORAGE_POOL_BUILDING: int
VIR_STORAGE_POOL_RUNNING: int
VIR_STORAGE_POOL_DEGRADED: int
VIR_STORAGE_POOL_INACCESSIBLE: int
VIR_STORAGE_VOL_CREATE_PREALLOC_METADATA: int
VIR_STORAGE_VOL_CREATE_REFLINK: int
VIR_STORAGE_VOL_DELETE_NORMAL: int
VIR_STORAGE_VOL_DELETE_ZEROED: int
VIR_STORAGE_VOL_DELETE_WITH_SNAPSHOTS: int
VIR_STORAGE_VOL_DOWNLOAD_SPARSE_STREAM: int
VIR_STORAGE_VOL_USE_ALLOCATION: int
VIR_STORAGE_VOL_GET_PHYSICAL: int
VIR_STORAGE_VOL_RESIZE_ALLOCATE: int
VIR_STORAGE_VOL_RESIZE_DELTA: int
VIR_STORAGE_VOL_RESIZE_SHRINK: int
VIR_STORAGE_VOL_FILE: int
VIR_STORAGE_VOL_BLOCK: int
VIR_STORAGE_VOL_DIR: int
VIR_STORAGE_VOL_NETWORK: int
VIR_STORAGE_VOL_NETDIR: int
VIR_STORAGE_VOL_PLOOP: int
VIR_STORAGE_VOL_UPLOAD_SPARSE_STREAM: int
VIR_STORAGE_VOL_WIPE_ALG_ZERO: int
VIR_STORAGE_VOL_WIPE_ALG_NNSA: int
VIR_STORAGE_VOL_WIPE_ALG_DOD: int
VIR_STORAGE_VOL_WIPE_ALG_BSI: int
VIR_STORAGE_VOL_WIPE_ALG_GUTMANN: int
VIR_STORAGE_VOL_WIPE_ALG_SCHNEIER: int
VIR_STORAGE_VOL_WIPE_ALG_PFITZNER7: int
VIR_STORAGE_VOL_WIPE_ALG_PFITZNER33: int
VIR_STORAGE_VOL_WIPE_ALG_RANDOM: int
VIR_STORAGE_VOL_WIPE_ALG_TRIM: int
VIR_STORAGE_XML_INACTIVE: int
VIR_STREAM_EVENT_READABLE: int
VIR_STREAM_EVENT_WRITABLE: int
VIR_STREAM_EVENT_ERROR: int
VIR_STREAM_EVENT_HANGUP: int
VIR_STREAM_NONBLOCK: int
VIR_STREAM_RECV_STOP_AT_HOLE: int
VIR_TYPED_PARAM_STRING_OKAY: int
VIR_TYPED_PARAM_INT: int
VIR_TYPED_PARAM_UINT: int
VIR_TYPED_PARAM_LLONG: int
VIR_TYPED_PARAM_ULLONG: int
VIR_TYPED_PARAM_DOUBLE: int
VIR_TYPED_PARAM_BOOLEAN: int
VIR_TYPED_PARAM_STRING: int
VIR_VCPU_OFFLINE: int
VIR_VCPU_RUNNING: int
VIR_VCPU_BLOCKED: int
VIR_CONNECT_IDENTITY_GROUP_NAME: str
VIR_CONNECT_IDENTITY_PROCESS_ID: str
VIR_CONNECT_IDENTITY_PROCESS_TIME: str
VIR_CONNECT_IDENTITY_SASL_USER_NAME: str
VIR_CONNECT_IDENTITY_SELINUX_CONTEXT: str
VIR_CONNECT_IDENTITY_UNIX_GROUP_ID: str
VIR_CONNECT_IDENTITY_UNIX_USER_ID: str
VIR_CONNECT_IDENTITY_USER_NAME: str
VIR_CONNECT_IDENTITY_X509_DISTINGUISHED_NAME: str
VIR_DOMAIN_BANDWIDTH_IN_AVERAGE: str
VIR_DOMAIN_BANDWIDTH_IN_BURST: str
VIR_DOMAIN_BANDWIDTH_IN_FLOOR: str
VIR_DOMAIN_BANDWIDTH_IN_PEAK: str
VIR_DOMAIN_BANDWIDTH_OUT_AVERAGE: str
VIR_DOMAIN_BANDWIDTH_OUT_BURST: str
VIR_DOMAIN_BANDWIDTH_OUT_PEAK: str
VIR_DOMAIN_BLKIO_DEVICE_READ_BPS: str
VIR_DOMAIN_BLKIO_DEVICE_READ_IOPS: str
VIR_DOMAIN_BLKIO_DEVICE_WEIGHT: str
VIR_DOMAIN_BLKIO_DEVICE_WRITE_BPS: str
VIR_DOMAIN_BLKIO_DEVICE_WRITE_IOPS: str
VIR_DOMAIN_BLKIO_WEIGHT: str
VIR_DOMAIN_BLOCK_COPY_BANDWIDTH: str
VIR_DOMAIN_BLOCK_COPY_BUF_SIZE: str
VIR_DOMAIN_BLOCK_COPY_GRANULARITY: str
VIR_DOMAIN_BLOCK_IOTUNE_GROUP_NAME: str
VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX: str
VIR_DOMAIN_BLOCK_IOTUNE_READ_BYTES_SEC_MAX_LENGTH: str
VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX: str
VIR_DOMAIN_BLOCK_IOTUNE_READ_IOPS_SEC_MAX_LENGTH: str
VIR_DOMAIN_BLOCK_IOTUNE_SIZE_IOPS_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX: str
VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_BYTES_SEC_MAX_LENGTH: str
VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX: str
VIR_DOMAIN_BLOCK_IOTUNE_TOTAL_IOPS_SEC_MAX_LENGTH: str
VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX: str
VIR_DOMAIN_BLOCK_IOTUNE_WRITE_BYTES_SEC_MAX_LENGTH: str
VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC: str
VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX: str
VIR_DOMAIN_BLOCK_IOTUNE_WRITE_IOPS_SEC_MAX_LENGTH: str
VIR_DOMAIN_BLOCK_STATS_ERRS: str
VIR_DOMAIN_BLOCK_STATS_FLUSH_REQ: str
VIR_DOMAIN_BLOCK_STATS_FLUSH_TOTAL_TIMES: str
VIR_DOMAIN_BLOCK_STATS_READ_BYTES: str
VIR_DOMAIN_BLOCK_STATS_READ_REQ: str
VIR_DOMAIN_BLOCK_STATS_READ_TOTAL_TIMES: str
VIR_DOMAIN_BLOCK_STATS_WRITE_BYTES: str
VIR_DOMAIN_BLOCK_STATS_WRITE_REQ: str
VIR_DOMAIN_BLOCK_STATS_WRITE_TOTAL_TIMES: str
VIR_DOMAIN_CPU_STATS_CPUTIME: str
VIR_DOMAIN_CPU_STATS_SYSTEMTIME: str
VIR_DOMAIN_CPU_STATS_USERTIME: str
VIR_DOMAIN_CPU_STATS_VCPUTIME: str
VIR_DOMAIN_IOTHREAD_POLL_GROW: str
VIR_DOMAIN_IOTHREAD_POLL_MAX_NS: str
VIR_DOMAIN_IOTHREAD_POLL_SHRINK: str
VIR_DOMAIN_JOB_AUTO_CONVERGE_THROTTLE: str
VIR_DOMAIN_JOB_COMPRESSION_BYTES: str
VIR_DOMAIN_JOB_COMPRESSION_CACHE: str
VIR_DOMAIN_JOB_COMPRESSION_CACHE_MISSES: str
VIR_DOMAIN_JOB_COMPRESSION_OVERFLOW: str
VIR_DOMAIN_JOB_COMPRESSION_PAGES: str
VIR_DOMAIN_JOB_DATA_PROCESSED: str
VIR_DOMAIN_JOB_DATA_REMAINING: str
VIR_DOMAIN_JOB_DATA_TOTAL: str
VIR_DOMAIN_JOB_DISK_BPS: str
VIR_DOMAIN_JOB_DISK_PROCESSED: str
VIR_DOMAIN_JOB_DISK_REMAINING: str
VIR_DOMAIN_JOB_DISK_TEMP_TOTAL: str
VIR_DOMAIN_JOB_DISK_TEMP_USED: str
VIR_DOMAIN_JOB_DISK_TOTAL: str
VIR_DOMAIN_JOB_DOWNTIME: str
VIR_DOMAIN_JOB_DOWNTIME_NET: str
VIR_DOMAIN_JOB_ERRMSG: str
VIR_DOMAIN_JOB_MEMORY_BPS: str
VIR_DOMAIN_JOB_MEMORY_CONSTANT: str
VIR_DOMAIN_JOB_MEMORY_DIRTY_RATE: str
VIR_DOMAIN_JOB_MEMORY_ITERATION: str
VIR_DOMAIN_JOB_MEMORY_NORMAL: str
VIR_DOMAIN_JOB_MEMORY_NORMAL_BYTES: str
VIR_DOMAIN_JOB_MEMORY_PAGE_SIZE: str
VIR_DOMAIN_JOB_MEMORY_POSTCOPY_REQS: str
VIR_DOMAIN_JOB_MEMORY_PROCESSED: str
VIR_DOMAIN_JOB_MEMORY_REMAINING: str
VIR_DOMAIN_JOB_MEMORY_TOTAL: str
VIR_DOMAIN_JOB_OPERATION: str
VIR_DOMAIN_JOB_SETUP_TIME: str
VIR_DOMAIN_JOB_SUCCESS: str
VIR_DOMAIN_JOB_TIME_ELAPSED: str
VIR_DOMAIN_JOB_TIME_ELAPSED_NET: str
VIR_DOMAIN_JOB_TIME_REMAINING: str
VIR_DOMAIN_LAUNCH_SECURITY_SEV_MEASUREMENT: str
VIR_DOMAIN_MEMORY_HARD_LIMIT: str
VIR_DOMAIN_MEMORY_MIN_GUARANTEE: str
VIR_DOMAIN_MEMORY_SOFT_LIMIT: str
VIR_DOMAIN_MEMORY_SWAP_HARD_LIMIT: str
VIR_DOMAIN_NUMA_MODE: str
VIR_DOMAIN_NUMA_NODESET: str
VIR_DOMAIN_SCHEDULER_CAP: str
VIR_DOMAIN_SCHEDULER_CPU_SHARES: str
VIR_DOMAIN_SCHEDULER_EMULATOR_PERIOD: str
VIR_DOMAIN_SCHEDULER_EMULATOR_QUOTA: str
VIR_DOMAIN_SCHEDULER_GLOBAL_PERIOD: str
VIR_DOMAIN_SCHEDULER_GLOBAL_QUOTA: str
VIR_DOMAIN_SCHEDULER_IOTHREAD_PERIOD: str
VIR_DOMAIN_SCHEDULER_IOTHREAD_QUOTA: str
VIR_DOMAIN_SCHEDULER_LIMIT: str
VIR_DOMAIN_SCHEDULER_RESERVATION: str
VIR_DOMAIN_SCHEDULER_SHARES: str
VIR_DOMAIN_SCHEDULER_VCPU_PERIOD: str
VIR_DOMAIN_SCHEDULER_VCPU_QUOTA: str
VIR_DOMAIN_SCHEDULER_WEIGHT: str
VIR_DOMAIN_TUNABLE_BLKDEV_DISK: str
VIR_DOMAIN_TUNABLE_BLKDEV_GROUP_NAME: str
VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX: str
VIR_DOMAIN_TUNABLE_BLKDEV_READ_BYTES_SEC_MAX_LENGTH: str
VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX: str
VIR_DOMAIN_TUNABLE_BLKDEV_READ_IOPS_SEC_MAX_LENGTH: str
VIR_DOMAIN_TUNABLE_BLKDEV_SIZE_IOPS_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX: str
VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_BYTES_SEC_MAX_LENGTH: str
VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX: str
VIR_DOMAIN_TUNABLE_BLKDEV_TOTAL_IOPS_SEC_MAX_LENGTH: str
VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX: str
VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_BYTES_SEC_MAX_LENGTH: str
VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC: str
VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX: str
VIR_DOMAIN_TUNABLE_BLKDEV_WRITE_IOPS_SEC_MAX_LENGTH: str
VIR_DOMAIN_TUNABLE_CPU_CPU_SHARES: str
VIR_DOMAIN_TUNABLE_CPU_EMULATORPIN: str
VIR_DOMAIN_TUNABLE_CPU_EMULATOR_PERIOD: str
VIR_DOMAIN_TUNABLE_CPU_EMULATOR_QUOTA: str
VIR_DOMAIN_TUNABLE_CPU_GLOBAL_PERIOD: str
VIR_DOMAIN_TUNABLE_CPU_GLOBAL_QUOTA: str
VIR_DOMAIN_TUNABLE_CPU_IOTHREADSPIN: str
VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_PERIOD: str
VIR_DOMAIN_TUNABLE_CPU_IOTHREAD_QUOTA: str
VIR_DOMAIN_TUNABLE_CPU_VCPUPIN: str
VIR_DOMAIN_TUNABLE_CPU_VCPU_PERIOD: str
VIR_DOMAIN_TUNABLE_CPU_VCPU_QUOTA: str
VIR_MIGRATE_PARAM_AUTO_CONVERGE_INCREMENT: str
VIR_MIGRATE_PARAM_AUTO_CONVERGE_INITIAL: str
VIR_MIGRATE_PARAM_BANDWIDTH: str
VIR_MIGRATE_PARAM_BANDWIDTH_POSTCOPY: str
VIR_MIGRATE_PARAM_COMPRESSION: str
VIR_MIGRATE_PARAM_COMPRESSION_MT_DTHREADS: str
VIR_MIGRATE_PARAM_COMPRESSION_MT_LEVEL: str
VIR_MIGRATE_PARAM_COMPRESSION_MT_THREADS: str
VIR_MIGRATE_PARAM_COMPRESSION_XBZRLE_CACHE: str
VIR_MIGRATE_PARAM_DEST_NAME: str
VIR_MIGRATE_PARAM_DEST_XML: str
VIR_MIGRATE_PARAM_DISKS_PORT: str
VIR_MIGRATE_PARAM_GRAPHICS_URI: str
VIR_MIGRATE_PARAM_LISTEN_ADDRESS: str
VIR_MIGRATE_PARAM_MIGRATE_DISKS: str
VIR_MIGRATE_PARAM_PARALLEL_CONNECTIONS: str
VIR_MIGRATE_PARAM_PERSIST_XML: str
VIR_MIGRATE_PARAM_TLS_DESTINATION: str
VIR_MIGRATE_PARAM_URI: str
VIR_NETWORK_PORT_BANDWIDTH_IN_AVERAGE: str
VIR_NETWORK_PORT_BANDWIDTH_IN_BURST: str
VIR_NETWORK_PORT_BANDWIDTH_IN_FLOOR: str
VIR_NETWORK_PORT_BANDWIDTH_IN_PEAK: str
VIR_NETWORK_PORT_BANDWIDTH_OUT_AVERAGE: str
VIR_NETWORK_PORT_BANDWIDTH_OUT_BURST: str
VIR_NETWORK_PORT_BANDWIDTH_OUT_PEAK: str
VIR_NODE_CPU_STATS_IDLE: str
VIR_NODE_CPU_STATS_INTR: str
VIR_NODE_CPU_STATS_IOWAIT: str
VIR_NODE_CPU_STATS_KERNEL: str
VIR_NODE_CPU_STATS_USER: str
VIR_NODE_CPU_STATS_UTILIZATION: str
VIR_NODE_MEMORY_SHARED_FULL_SCANS: str
VIR_NODE_MEMORY_SHARED_MERGE_ACROSS_NODES: str
VIR_NODE_MEMORY_SHARED_PAGES_SHARED: str
VIR_NODE_MEMORY_SHARED_PAGES_SHARING: str
VIR_NODE_MEMORY_SHARED_PAGES_TO_SCAN: str
VIR_NODE_MEMORY_SHARED_PAGES_UNSHARED: str
VIR_NODE_MEMORY_SHARED_PAGES_VOLATILE: str
VIR_NODE_MEMORY_SHARED_SLEEP_MILLISECS: str
VIR_NODE_MEMORY_STATS_BUFFERS: str
VIR_NODE_MEMORY_STATS_CACHED: str
VIR_NODE_MEMORY_STATS_FREE: str
VIR_NODE_MEMORY_STATS_TOTAL: str
VIR_NODE_SEV_CBITPOS: str
VIR_NODE_SEV_CERT_CHAIN: str
VIR_NODE_SEV_PDH: str
VIR_NODE_SEV_REDUCED_PHYS_BITS: str
VIR_PERF_PARAM_ALIGNMENT_FAULTS: str
VIR_PERF_PARAM_BRANCH_INSTRUCTIONS: str
VIR_PERF_PARAM_BRANCH_MISSES: str
VIR_PERF_PARAM_BUS_CYCLES: str
VIR_PERF_PARAM_CACHE_MISSES: str
VIR_PERF_PARAM_CACHE_REFERENCES: str
VIR_PERF_PARAM_CMT: str
VIR_PERF_PARAM_CONTEXT_SWITCHES: str
VIR_PERF_PARAM_CPU_CLOCK: str
VIR_PERF_PARAM_CPU_CYCLES: str
VIR_PERF_PARAM_CPU_MIGRATIONS: str
VIR_PERF_PARAM_EMULATION_FAULTS: str
VIR_PERF_PARAM_INSTRUCTIONS: str
VIR_PERF_PARAM_MBML: str
VIR_PERF_PARAM_MBMT: str
VIR_PERF_PARAM_PAGE_FAULTS: str
VIR_PERF_PARAM_PAGE_FAULTS_MAJ: str
VIR_PERF_PARAM_PAGE_FAULTS_MIN: str
VIR_PERF_PARAM_REF_CPU_CYCLES: str
VIR_PERF_PARAM_STALLED_CYCLES_BACKEND: str
VIR_PERF_PARAM_STALLED_CYCLES_FRONTEND: str
VIR_PERF_PARAM_TASK_CLOCK: str
