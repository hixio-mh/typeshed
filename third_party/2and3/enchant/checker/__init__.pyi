from typing import Iterator, List, Optional, Type, Union

from enchant import Dict
from enchant.errors import *
from enchant.tokenize import Chunker, Filter, get_tokenizer as get_tokenizer, tokenize
from enchant.utils import get_default_language as get_default_language

class SpellChecker:
    lang: str = ...
    dict: Dict = ...
    word: Optional[str] = ...
    wordpos: Optional[int] = ...
    def __init__(
        self,
        lang: Union[Dict, str] = ...,
        text: str = ...,
        tokenize: Union[Type[tokenize], Filter] = ...,
        chunkers: List[Chunker] = ...,
        filters: List[Filter] = ...,
    ) -> None: ...
    def __iter__(self) -> Iterator[SpellChecker]: ...
    def set_text(self, text: str) -> None: ...
    def get_text(self) -> str: ...
    def wants_unicode(self) -> bool: ...
    def coerce_string(self, text: str, enc: str = ...) -> str: ...
    def __next__(self) -> SpellChecker: ...
    def next(self) -> SpellChecker: ...
    def replace(self, repl: str) -> None: ...
    def replace_always(self, word: str, repl: str = ...) -> None: ...
    def ignore_always(self, word: str = ...) -> None: ...
    def add_to_personal(self, word: str = ...) -> None: ...
    def add(self, word: str = ...) -> None: ...
    def suggest(self, word: str = ...) -> List[str]: ...
    def check(self, word: str) -> bool: ...
    def set_offset(self, off: int, whence: int = ...) -> None: ...
    def leading_context(self, chars: int) -> str: ...
    def trailing_context(self, chars: int) -> str: ...
