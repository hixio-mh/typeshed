from typing import Any, Iterable, Iterator, List, Optional

class Trie:
    def __init__(self, words: Iterable[str] = ...) -> None: ...
    def insert(self, word: str) -> None: ...
    def remove(self, word: str) -> None: ...
    def search(self, word: str, nerrs: int = ...) -> List[str]: ...
    def __getitem__(self, key: str) -> Trie: ...
    def __setitem__(self, key: str, val: Trie) -> None: ...
    def __iter__(self) -> Iterator[str]: ...

class PyPWL:
    provider: None = ...
    pwl: Optional[str] = ...
    tag: str = ...
    def __init__(self, pwl: str = ...) -> None: ...
    def check(self, word: str) -> bool: ...
    def suggest(self, word: str) -> List[str]: ...
    def add(self, word: str) -> None: ...
    def add_to_pwl(self, word: str) -> None: ...
    def remove(self, word: str) -> None: ...
    def add_to_session(self, word: str) -> None: ...
    def store_replacement(self, mis: str, cor: str) -> None: ...
    def is_added(self, word: str) -> bool: ...
    def is_removed(self, word: str) -> bool: ...
