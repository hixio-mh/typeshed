import sys
from typing import Any, Dict, List, Optional

from ldap.compat import UserDict

LDAP_SCOPE_BASE: int
LDAP_SCOPE_ONELEVEL: int
LDAP_SCOPE_SUBTREE: int
SEARCH_SCOPE_STR: Dict[Optional[int], str]
SEARCH_SCOPE: Dict[str, Optional[int]]

def isLDAPUrl(s: str): ...

class LDAPUrlExtension:
    critical: bool = ...
    extype: str = ...
    exvalue: str = ...
    def __init__(self, extensionStr: str = ..., critical: bool = ..., extype: str = ..., exvalue: str = ...) -> None: ...
    def unparse(self): ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...

class LDAPUrlExtensions(UserDict):
    def __init__(self, default: Dict[str, LDAPUrlExtension] = ...) -> None: ...
    def __setitem__(self, name: str, value: LDAPUrlExtension) -> None: ...
    def values(self) -> LDAPUrlExtension: ...
    def __eq__(self, other: Any) -> bool: ...
    def parse(self, extListStr: str) -> None: ...
    def unparse(self) -> str: ...

class LDAPUrl:
    attr2extype: Dict[str, str] = ...
    urlscheme: str = ...
    hostport: str = ...
    dn: str = ...
    attrs: List[str] = ...
    scope: int = ...
    filterstr: str = ...
    extensions: Dict = ...
    who: str = ...
    cred: str = ...
    def __init__(
        self,
        ldapUrl: str = ...,
        urlscheme: str = ...,
        hostport: str = ...,
        dn: str = ...,
        attrs: List[str] = ...,
        scope: Optional[Any] = ...,
        filterstr: Optional[Any] = ...,
        extensions: Optional[Any] = ...,
        who: Optional[Any] = ...,
        cred: Optional[Any] = ...,
    ) -> None: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def applyDefaults(self, defaults: Dict[str, str]) -> None: ...
    def initializeUrl(self): ...
    def unparse(self): ...
    def htmlHREF(self, urlPrefix: str = ..., hrefText: Optional[Any] = ..., hrefTarget: Optional[Any] = ...): ...
    def __getattr__(self, name: str): ...
    def __setattr__(self, name: str, value: str) -> None: ...
    def __delattr__(self, name: str) -> None: ...
