from typing import Any, Optional

SEARCH_RESULT_TYPES: Any
ENTRY_RESULT_TYPES: Any

class WrongResultType(Exception):
    receivedResultType: Any = ...
    expectedResultTypes: Any = ...
    def __init__(self, receivedResultType: Any, expectedResultTypes: Any) -> None: ...

class AsyncSearchHandler:
    def __init__(self, l: Any) -> None: ...
    def startSearch(
        self,
        searchRoot: Any,
        searchScope: Any,
        filterStr: Any,
        attrList: Optional[Any] = ...,
        attrsOnly: int = ...,
        timeout: int = ...,
        sizelimit: int = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
    ) -> None: ...
    def preProcessing(self) -> None: ...
    def afterFirstResult(self) -> None: ...
    def postProcessing(self) -> None: ...
    beginResultsDropped: int = ...
    endResultBreak: Any = ...
    def processResults(self, ignoreResultsNumber: int = ..., processResultsCount: int = ..., timeout: int = ...): ...

class List(AsyncSearchHandler):
    allResults: Any = ...
    def __init__(self, l: Any) -> None: ...

class Dict(AsyncSearchHandler):
    allEntries: Any = ...
    def __init__(self, l: Any) -> None: ...

class IndexedDict(Dict):
    indexed_attrs: Any = ...
    index: Any = ...
    def __init__(self, l: Any, indexed_attrs: Optional[Any] = ...) -> None: ...

class FileWriter(AsyncSearchHandler):
    headerStr: Any = ...
    footerStr: Any = ...
    def __init__(self, l: Any, f: Any, headerStr: str = ..., footerStr: str = ...) -> None: ...
    def preProcessing(self) -> None: ...
    def postProcessing(self) -> None: ...

class LDIFWriter(FileWriter):
    def __init__(self, l: Any, writer_obj: Any, headerStr: str = ..., footerStr: str = ...) -> None: ...
