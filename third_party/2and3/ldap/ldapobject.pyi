from typing import Any, Optional

import ldap.functions

text_type = str

class LDAPBytesWarning(BytesWarning): ...
class NO_UNIQUE_ENTRY(ldap.NO_SUCH_OBJECT): ...

class SimpleLDAPObject:
    CLASSATTR_OPTION_MAPPING: Any = ...
    timeout: int = ...
    protocol_version: Any = ...
    bytes_mode: Any = ...
    bytes_strictness: Any = ...
    def __init__(
        self,
        uri: Any,
        trace_level: int = ...,
        trace_file: Optional[Any] = ...,
        trace_stack_limit: int = ...,
        bytes_mode: Optional[Any] = ...,
        bytes_strictness: Optional[Any] = ...,
    ) -> None: ...
    def __setattr__(self, name: Any, value: Any) -> None: ...
    def __getattr__(self, name: Any): ...
    def fileno(self): ...
    def abandon_ext(self, msgid: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def abandon(self, msgid: Any): ...
    def cancel(self, cancelid: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def cancel_s(self, cancelid: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def add_ext(self, dn: Any, modlist: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def add_ext_s(self, dn: Any, modlist: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def add(self, dn: Any, modlist: Any): ...
    def add_s(self, dn: Any, modlist: Any): ...
    def simple_bind(
        self,
        who: Optional[Any] = ...,
        cred: Optional[Any] = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
    ): ...
    def simple_bind_s(
        self,
        who: Optional[Any] = ...,
        cred: Optional[Any] = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
    ): ...
    def bind(self, who: Any, cred: Any, method: Any = ...): ...
    def bind_s(self, who: Any, cred: Any, method: Any = ...): ...
    def sasl_interactive_bind_s(
        self, who: Any, auth: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ..., sasl_flags: Any = ...
    ): ...
    def sasl_non_interactive_bind_s(
        self,
        sasl_mech: Any,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
        sasl_flags: Any = ...,
        authz_id: str = ...,
    ) -> None: ...
    def sasl_external_bind_s(
        self, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ..., sasl_flags: Any = ..., authz_id: str = ...
    ) -> None: ...
    def sasl_gssapi_bind_s(
        self, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ..., sasl_flags: Any = ..., authz_id: str = ...
    ) -> None: ...
    def sasl_bind_s(
        self, dn: Any, mechanism: Any, cred: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...
    ): ...
    def compare_ext(self, dn: Any, attr: Any, value: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def compare_ext_s(
        self, dn: Any, attr: Any, value: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...
    ): ...
    def compare(self, dn: Any, attr: Any, value: Any): ...
    def compare_s(self, dn: Any, attr: Any, value: Any): ...
    def delete_ext(self, dn: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def delete_ext_s(self, dn: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def delete(self, dn: Any): ...
    def delete_s(self, dn: Any): ...
    def extop(self, extreq: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def extop_result(self, msgid: Any = ..., all: int = ..., timeout: Optional[Any] = ...): ...
    def extop_s(
        self,
        extreq: Any,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
        extop_resp_class: Optional[Any] = ...,
    ): ...
    def modify_ext(self, dn: Any, modlist: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def modify_ext_s(self, dn: Any, modlist: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def modify(self, dn: Any, modlist: Any): ...
    def modify_s(self, dn: Any, modlist: Any): ...
    def modrdn(self, dn: Any, newrdn: Any, delold: int = ...): ...
    def modrdn_s(self, dn: Any, newrdn: Any, delold: int = ...): ...
    def passwd(self, user: Any, oldpw: Any, newpw: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def passwd_s(self, user: Any, oldpw: Any, newpw: Any, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def rename(
        self,
        dn: Any,
        newrdn: Any,
        newsuperior: Optional[Any] = ...,
        delold: int = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
    ): ...
    def rename_s(
        self,
        dn: Any,
        newrdn: Any,
        newsuperior: Optional[Any] = ...,
        delold: int = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
    ): ...
    def result(self, msgid: Any = ..., all: int = ..., timeout: Optional[Any] = ...): ...
    def result2(self, msgid: Any = ..., all: int = ..., timeout: Optional[Any] = ...): ...
    def result3(self, msgid: Any = ..., all: int = ..., timeout: Optional[Any] = ..., resp_ctrl_classes: Optional[Any] = ...): ...
    def result4(
        self,
        msgid: Any = ...,
        all: int = ...,
        timeout: Optional[Any] = ...,
        add_ctrls: int = ...,
        add_intermediates: int = ...,
        add_extop: int = ...,
        resp_ctrl_classes: Optional[Any] = ...,
    ): ...
    def search_ext(
        self,
        base: Any,
        scope: Any,
        filterstr: Optional[Any] = ...,
        attrlist: Optional[Any] = ...,
        attrsonly: int = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
        timeout: int = ...,
        sizelimit: int = ...,
    ): ...
    def search_ext_s(
        self,
        base: Any,
        scope: Any,
        filterstr: Optional[Any] = ...,
        attrlist: Optional[Any] = ...,
        attrsonly: int = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
        timeout: int = ...,
        sizelimit: int = ...,
    ): ...
    def search(
        self, base: Any, scope: Any, filterstr: Optional[Any] = ..., attrlist: Optional[Any] = ..., attrsonly: int = ...
    ): ...
    def search_s(
        self, base: Any, scope: Any, filterstr: Optional[Any] = ..., attrlist: Optional[Any] = ..., attrsonly: int = ...
    ): ...
    def search_st(
        self,
        base: Any,
        scope: Any,
        filterstr: Optional[Any] = ...,
        attrlist: Optional[Any] = ...,
        attrsonly: int = ...,
        timeout: int = ...,
    ): ...
    def start_tls_s(self): ...
    def unbind_ext(self, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def unbind_ext_s(self, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def unbind(self): ...
    def unbind_s(self): ...
    def whoami_s(self, serverctrls: Optional[Any] = ..., clientctrls: Optional[Any] = ...): ...
    def get_option(self, option: Any): ...
    def set_option(self, option: Any, invalue: Any): ...
    def search_subschemasubentry_s(self, dn: Optional[Any] = ...): ...
    def read_s(
        self,
        dn: Any,
        filterstr: Optional[Any] = ...,
        attrlist: Optional[Any] = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
        timeout: int = ...,
    ): ...
    def read_subschemasubentry_s(self, subschemasubentry_dn: Any, attrs: Optional[Any] = ...): ...
    def find_unique_entry(
        self,
        base: Any,
        scope: Any = ...,
        filterstr: Optional[Any] = ...,
        attrlist: Optional[Any] = ...,
        attrsonly: int = ...,
        serverctrls: Optional[Any] = ...,
        clientctrls: Optional[Any] = ...,
        timeout: int = ...,
    ): ...
    def read_rootdse_s(self, filterstr: Optional[Any] = ..., attrlist: Optional[Any] = ...): ...
    def get_naming_contexts(self): ...

class ReconnectLDAPObject(SimpleLDAPObject):
    __transient_attrs__: Any = ...
    def __init__(
        self,
        uri: Any,
        trace_level: int = ...,
        trace_file: Optional[Any] = ...,
        trace_stack_limit: int = ...,
        bytes_mode: Optional[Any] = ...,
        bytes_strictness: Optional[Any] = ...,
        retry_max: int = ...,
        retry_delay: float = ...,
    ) -> None: ...
    def passwd_s(self, *args: Any, **kwargs: Any): ...
    def reconnect(self, uri: Any, retry_max: int = ..., retry_delay: float = ...) -> None: ...
    def set_option(self, option: Any, invalue: Any): ...
    def bind_s(self, *args: Any, **kwargs: Any): ...
    def simple_bind_s(self, *args: Any, **kwargs: Any): ...
    def start_tls_s(self, *args: Any, **kwargs: Any): ...
    def sasl_interactive_bind_s(self, *args: Any, **kwargs: Any): ...
    def sasl_bind_s(self, *args: Any, **kwargs: Any): ...
    def add_ext_s(self, *args: Any, **kwargs: Any): ...
    def cancel_s(self, *args: Any, **kwargs: Any): ...
    def compare_ext_s(self, *args: Any, **kwargs: Any): ...
    def delete_ext_s(self, *args: Any, **kwargs: Any): ...
    def extop_s(self, *args: Any, **kwargs: Any): ...
    def modify_ext_s(self, *args: Any, **kwargs: Any): ...
    def rename_s(self, *args: Any, **kwargs: Any): ...
    def search_ext_s(self, *args: Any, **kwargs: Any): ...
    def whoami_s(self, *args: Any, **kwargs: Any): ...

LDAPObject = SimpleLDAPObject
