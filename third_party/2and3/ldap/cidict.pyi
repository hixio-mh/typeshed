from typing import Iterable, Iterator, List, Mapping, Optional, Tuple, TypeVar

from ldap.compat import IterableUserDict as IterableUserDict

_T = TypeVar("_T")
_VT = TypeVar("_VT")

class cidict(IterableUserDict):
    def __init__(self, default: Mapping[str, _VT] = ...) -> None: ...
    def __getitem__(self, key: str) -> _VT: ...
    def __setitem__(self, key: str, value: _VT) -> None: ...
    def __delitem__(self, key: str) -> None: ...
    def update(self, dict: Mapping[str, _VT]) -> None: ...
    def has_key(self, key: str) -> bool: ...
    def __contains__(self, key: str): ...
    def __iter__(self) -> Iterator[str]: ...
    def keys(self) -> Iterable[str]: ...
    def items(self) -> List[Tuple[str, _VT]]: ...

def strlist_minus(a: Iterable[_T], b: Iterable[_T]) -> List[_T]: ...
def strlist_intersection(a: Iterable[_T], b: Iterable[_T]) -> List[_T]: ...
def strlist_union(a: Iterable[_T], b: Iterable[_T]) -> List[_T]: ...
