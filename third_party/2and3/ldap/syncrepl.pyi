from typing import Any, Optional

from ldap.controls import RequestControl, ResponseControl
from pyasn1.type import univ

class SyncUUID(univ.OctetString):
    subtypeSpec: Any = ...

class SyncCookie(univ.OctetString): ...

class SyncRequestMode(univ.Enumerated):
    namedValues: Any = ...
    subtypeSpec: Any = ...

class SyncRequestValue(univ.Sequence):
    componentType: Any = ...

class SyncRequestControl(RequestControl):
    controlType: str = ...
    criticality: Any = ...
    cookie: Any = ...
    mode: Any = ...
    reloadHint: Any = ...
    def __init__(self, criticality: int = ..., cookie: Optional[Any] = ..., mode: str = ..., reloadHint: bool = ...) -> None: ...
    def encodeControlValue(self): ...

class SyncStateOp(univ.Enumerated):
    namedValues: Any = ...
    subtypeSpec: Any = ...

class SyncStateValue(univ.Sequence):
    componentType: Any = ...

class SyncStateControl(ResponseControl):
    controlType: str = ...
    opnames: Any = ...
    cookie: Any = ...
    state: Any = ...
    entryUUID: Any = ...
    def decodeControlValue(self, encodedControlValue: Any) -> None: ...

class SyncDoneValue(univ.Sequence):
    componentType: Any = ...

class SyncDoneControl(ResponseControl):
    controlType: str = ...
    cookie: Any = ...
    refreshDeletes: Any = ...
    def decodeControlValue(self, encodedControlValue: Any) -> None: ...

class RefreshDelete(univ.Sequence):
    componentType: Any = ...

class RefreshPresent(univ.Sequence):
    componentType: Any = ...

class SyncUUIDs(univ.SetOf):
    componentType: Any = ...

class SyncIdSet(univ.Sequence):
    componentType: Any = ...

class SyncInfoValue(univ.Choice):
    componentType: Any = ...

class SyncInfoMessage:
    responseName: str = ...
    newcookie: Any = ...
    refreshDelete: Any = ...
    refreshPresent: Any = ...
    syncIdSet: Any = ...
    def __init__(self, encodedMessage: Any) -> None: ...

class SyncreplConsumer:
    def syncrepl_search(self, base: Any, scope: Any, mode: str = ..., cookie: Optional[Any] = ..., **search_args: Any): ...
    def syncrepl_poll(self, msgid: int = ..., timeout: Optional[Any] = ..., all: int = ...): ...
    def syncrepl_set_cookie(self, cookie: Any) -> None: ...
    def syncrepl_get_cookie(self) -> None: ...
    def syncrepl_present(self, uuids: Any, refreshDeletes: bool = ...) -> None: ...
    def syncrepl_delete(self, uuids: Any) -> None: ...
    def syncrepl_entry(self, dn: Any, attrs: Any, uuid: Any) -> None: ...
    def syncrepl_refreshdone(self) -> None: ...
