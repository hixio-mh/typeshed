from typing import Any, Optional

from ldap.compat import urlopen as urlopen
from ldap.schema.models import *

SCHEMA_CLASS_MAPPING: Any
SCHEMA_ATTR_MAPPING: Any
SCHEMA_ATTRS: Any

class SubschemaError(ValueError): ...

class OIDNotUnique(SubschemaError):
    desc: Any = ...
    def __init__(self, desc: Any) -> None: ...

class NameNotUnique(SubschemaError):
    desc: Any = ...
    def __init__(self, desc: Any) -> None: ...

class SubSchema:
    name2oid: Any = ...
    sed: Any = ...
    non_unique_oids: Any = ...
    non_unique_names: Any = ...
    def __init__(self, sub_schema_sub_entry: Any, check_uniqueness: int = ...) -> None: ...
    def ldap_entry(self): ...
    def listall(self, schema_element_class: Any, schema_element_filters: Optional[Any] = ...): ...
    def tree(self, schema_element_class: Any, schema_element_filters: Optional[Any] = ...): ...
    def getoid(self, se_class: Any, nameoroid: Any, raise_keyerror: int = ...): ...
    def get_inheritedattr(self, se_class: Any, nameoroid: Any, name: Any): ...
    def get_obj(self, se_class: Any, nameoroid: Any, default: Optional[Any] = ..., raise_keyerror: int = ...): ...
    def get_inheritedobj(self, se_class: Any, nameoroid: Any, inherited: Optional[Any] = ...): ...
    def get_syntax(self, nameoroid: Any): ...
    def get_structural_oc(self, oc_list: Any): ...
    def get_applicable_aux_classes(self, nameoroid: Any): ...
    def attribute_types(
        self,
        object_class_list: Any,
        attr_type_filter: Optional[Any] = ...,
        raise_keyerror: int = ...,
        ignore_dit_content_rule: int = ...,
    ): ...

def urlfetch(uri: Any, trace_level: int = ...): ...
