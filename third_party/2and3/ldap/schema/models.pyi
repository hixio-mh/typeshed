from typing import Any, Optional

from ldap.compat import IterableUserDict as IterableUserDict
from ldap.schema.tokenizer import extract_tokens as extract_tokens, split_tokens as split_tokens

NOT_HUMAN_READABLE_LDAP_SYNTAXES: Any

class SchemaElement:
    token_defaults: Any = ...
    def __init__(self, schema_element_str: Optional[Any] = ...) -> None: ...
    oid: Any = ...
    def set_id(self, element_id: Any) -> None: ...
    def get_id(self): ...
    def key_attr(self, key: Any, value: Any, quoted: int = ...): ...
    def key_list(self, key: Any, values: Any, sep: str = ..., quoted: int = ...): ...

class ObjectClass(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

AttributeUsage: Any

class AttributeType(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

class LDAPSyntax(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

class MatchingRule(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

class MatchingRuleUse(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

class DITContentRule(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

class DITStructureRule(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...
    ruleid: Any = ...
    def set_id(self, element_id: Any) -> None: ...
    def get_id(self): ...

class NameForm(SchemaElement):
    schema_attribute: str = ...
    token_defaults: Any = ...

class Entry(IterableUserDict):
    dn: Any = ...
    def __init__(self, schema: Any, dn: Any, entry: Any) -> None: ...
    def update(self, dict: Any) -> None: ...
    def __contains__(self, nameoroid: Any): ...
    def __getitem__(self, nameoroid: Any): ...
    def __setitem__(self, nameoroid: Any, attr_values: Any) -> None: ...
    def __delitem__(self, nameoroid: Any) -> None: ...
    def has_key(self, nameoroid: Any): ...
    def keys(self): ...
    def items(self): ...
    def attribute_types(self, attr_type_filter: Optional[Any] = ..., raise_keyerror: int = ...): ...
