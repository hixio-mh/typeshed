import asyncio
from typing import Any, Callable, Generator, Optional, TypeVar
_T = TypeVar('_T')

class Callback:
    iden: Any = ...
    impl: Any = ...
    cb: Any = ...
    opaque: Any = ...
    def __init__(self, impl: virEventAsyncIOImpl, cb: Callable[[int, _T], None], opaque: _T) -> None: ...
    def close(self) -> None: ...

class Descriptor:
    impl: Any = ...
    fd: Any = ...
    callbacks: Any = ...
    def __init__(self, impl: virEventAsyncIOImpl, fd: int) -> None: ...
    def update(self) -> None: ...
    def add_handle(self, callback: FDCallback) -> None: ...
    def remove_handle(self, iden: int) -> None: ...

class DescriptorDict(dict):
    impl: Any = ...
    def __init__(self, impl: virEventAsyncIOImpl) -> None: ...
    def __missing__(self, fd: int) -> Descriptor: ...

class FDCallback(Callback):
    descriptor: Any = ...
    event: Any = ...
    def __init__(self, *args: Any, descriptor: Descriptor, event: int, **kwargs: Any) -> None: ...
    def update(self, event: int) -> None: ...

class TimeoutCallback(Callback):
    timeout: int = ...
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def update(self, timeout: int) -> None: ...
    def close(self) -> None: ...

class virEventAsyncIOImpl:
    loop: Any = ...
    callbacks: Any = ...
    descriptors: Any = ...
    log: Any = ...
    def __init__(self, loop: asyncio.AbstractEventLoop=...) -> None: ...
    def register(self) -> virEventAsyncIOImpl: ...
    def schedule_ff_callback(self, iden: int, opaque: _T) -> None: ...
    @asyncio.coroutine
    def drain(self) -> Generator[Any, None, None]: ...
    def is_idle(self) -> bool: ...

def getCurrentImpl() -> Optional[virEventAsyncIOImpl]: ...
def virEventRegisterAsyncIOImpl(loop: asyncio.AbstractEventLoop=...) -> virEventAsyncIOImpl: ...
