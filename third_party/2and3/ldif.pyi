import sys
from typing import IO, Dict, List, Optional, Text, Tuple, Union

Name = str
if sys.version_info >= (3, 0):  # bytes_mode=False
    Value = bytes
else:  # bytes_mode=True
    Value = str
Entry = Dict[Name, List[Value]]
Record = Tuple[Name, Entry]
Ops = List[Tuple[int, Name, List[Value]]]
Controls = List[Tuple[str, str, str]]

ldif_pattern: Text

class LDIFWriter:
    records_written: int = ...
    def __init__(self, output_file: IO[str], base64_attrs: List[str] = ..., cols: int = ..., line_sep: str = ...) -> None: ...
    def unparse(self, dn: Name, record: Record) -> None: ...

def CreateLDIF(dn: Name, record: Union[Record, Ops], base64_attrs: List[str] = ..., cols: int = ...): ...

class LDIFParser:
    version: Optional[int] = ...
    line_counter: int = ...
    byte_counter: int = ...
    records_read: int = ...
    changetype_counter: Dict[int, int] = ...
    def __init__(
        self,
        input_file: IO[str],
        ignored_attr_types: List[str] = ...,
        max_entries: int = ...,
        process_url_schemes: List[str] = ...,
        line_sep: str = ...,
    ) -> None: ...
    def handle(self, dn: Name, entry: Record) -> None: ...
    def parse_entry_records(self) -> None: ...
    def parse(self): ...
    def handle_modify(self, dn: Name, modops: Ops, controls: Controls = ...) -> None: ...
    def parse_change_records(self) -> None: ...

class LDIFRecordList(LDIFParser):
    all_records: List[Record] = ...
    all_modify_changes: List[Record] = ...
    def __init__(
        self,
        input_file: IO[str],
        ignored_attr_types: List[str] = ...,
        max_entries: int = ...,
        process_url_schemes: List[str] = ...,
    ) -> None: ...
    def handle(self, dn: Name, entry: Record) -> None: ...
    def handle_modify(self, dn: Name, modops: Ops, controls: Controls = ...) -> None: ...

class LDIFCopy(LDIFParser):
    def __init__(
        self,
        input_file: IO[str],
        output_file: IO[str],
        ignored_attr_types: List[str] = ...,
        max_entries: int = ...,
        process_url_schemes: List[str] = ...,
        base64_attrs: List[str] = ...,
        cols: int = ...,
        line_sep: str = ...,
    ) -> None: ...
    def handle(self, dn: Name, entry: Record) -> None: ...

def ParseLDIF(f: IO[str], ignore_attrs: List[str] = ..., maxentries: int = ...): ...
