import unittest
from typing import Any, Optional

HERE: Any
SLAPD_CONF_TEMPLATE: str
LOCALHOST: str
CI_DISABLED: Any
HAVE_LDAPI: bool

def identity(test_item: Any): ...
def skip_unless_ci(reason: Any, feature: Optional[Any] = ...): ...
def requires_tls(): ...
def requires_sasl(): ...
def requires_ldapi(): ...
def combined_logger(log_name: Any, log_level: Any = ..., sys_log_format: str = ..., console_log_format: str = ...): ...

class SlapdObject:
    slapd_conf_template: Any = ...
    database: str = ...
    suffix: str = ...
    root_cn: str = ...
    root_pw: str = ...
    slapd_loglevel: str = ...
    local_host: str = ...
    testrunsubdirs: Any = ...
    openldap_schema_files: Any = ...
    TMPDIR: Any = ...
    SCHEMADIR: Any = ...
    BIN_PATH: Any = ...
    SBIN_PATH: Any = ...
    server_id: Any = ...
    testrundir: Any = ...
    ldap_uri: Any = ...
    ldapi_uri: Any = ...
    default_ldap_uri: Any = ...
    cli_sasl_external: Any = ...
    cafile: Any = ...
    servercert: Any = ...
    serverkey: Any = ...
    clientcert: Any = ...
    clientkey: Any = ...
    def __init__(self) -> None: ...
    @property
    def root_dn(self): ...
    def setup_rundir(self) -> None: ...
    def gen_config(self): ...
    def start(self) -> None: ...
    def stop(self) -> None: ...
    def restart(self) -> None: ...
    def wait(self) -> None: ...
    def ldapwhoami(self, extra_args: Optional[Any] = ...) -> None: ...
    def ldapadd(self, ldif: Any, extra_args: Optional[Any] = ...) -> None: ...
    def ldapmodify(self, ldif: Any, extra_args: Optional[Any] = ...) -> None: ...
    def ldapdelete(self, dn: Any, recursive: bool = ..., extra_args: Optional[Any] = ...) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Any, exc_value: Any, traceback: Any) -> None: ...

class SlapdTestCase(unittest.TestCase):
    server_class: Any = ...
    server: Any = ...
    ldap_object_class: Any = ...
    @classmethod
    def setUpClass(cls) -> None: ...
    @classmethod
    def tearDownClass(cls) -> None: ...
